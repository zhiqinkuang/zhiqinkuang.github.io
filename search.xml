<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端基础宝典</title>
      <link href="/post/bf4791bd.html"/>
      <url>/post/bf4791bd.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端基础宝典"><a href="#前端基础宝典" class="headerlink" title="前端基础宝典"></a>前端基础宝典</h1><h2 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h2><p>推荐牛客的训练营：<a href="https://www.nowcoder.com/study/live/691/2/1">课程列表_牛客网 (nowcoder.com)</a></p><p><a href="https://juejin.cn/post/7016593221815910408#heading-16">🔥 连八股文都不懂还指望在前端混下去么 - 掘金 (juejin.cn)</a></p><h2 id="HTML-x2F-CSS的内容"><a href="#HTML-x2F-CSS的内容" class="headerlink" title="HTML  &#x2F;CSS的内容"></a>HTML  &#x2F;CSS的内容</h2><h3 id="盒模型介绍"><a href="#盒模型介绍" class="headerlink" title="盒模型介绍"></a>盒模型介绍</h3><p>cotent-box 以内容 content 为width 和 height 的设置对象 <strong>content-box &#x3D; content</strong></p><p>border-box 以border 设置宽高 IE 怪异盒模型：<strong>border-box &#x3D; content + padding + border</strong></p><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p>独立渲染的容器，脱离文档流，不会影响其他的元素</p><p>实现BFC 的方法</p><p>1.浮动 float 属性</p><p>2.定位 position ：fiexed 和 absolute</p><p>3.display 为 inline-block table-cell</p><p>4.overflow  中的hidden auto scroll</p><p>5.<html>标签</html></p><h3 id="BFC的使用场景"><a href="#BFC的使用场景" class="headerlink" title="BFC的使用场景"></a>BFC的使用场景</h3><p>1.清除浮动</p><p>2.防止margin 重叠</p><p>3.避免不必要的换行</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>1作用</p><p>1，便于维护和开发  屏幕阅读器或是无障碍功能</p><p>2，使HTML标签具有更好的可读性</p><p>3.便于SEO</p><p>常见的语义化标签</p><p>header，section ，article ，asside footer</p><p>4.常见的选择器</p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>id 选择器 类选择器，伪类 ：hover ：first-child 标签选择器，相邻选择器，子代选择器，后代选择器，属性选择器通配符选择器</p><p>一般排序</p><p>css 的优先级</p><p>！import 》行内》id》类》标签》通配符</p><p>id选择器&gt;（类选择器 | 伪类选择器 | 属性选择器 ）&gt; （后代选择器 | 伪元素选择器 ）&gt; （子选择器 | 相邻选择器） &gt; 通配符选择器</p><h3 id="常用的样式单位"><a href="#常用的样式单位" class="headerlink" title="常用的样式单位"></a>常用的样式单位</h3><p>em ：相对于自身的字体的大小</p><p>rem： 相对于html 标签字体的大小</p><p>vh： 相对于视口高度的大小  20vh&#x3D;&#x3D;视口高度&#x2F;100*20</p><p>vw:    相对于视口宽度的大小  20vw&#x3D;&#x3D;视口高度&#x2F;100*20</p><h3 id="父元素塌陷"><a href="#父元素塌陷" class="headerlink" title="父元素塌陷"></a>父元素塌陷</h3><p>1.在父元素后面添加空元素</p><p>2.添加 overflow ：auto</p><p>3.让父元素浮动</p><p>4.使用after</p><p>5.设置clearfix 样式清除浮动</p><h3 id="让一个元素水平垂直居中"><a href="#让一个元素水平垂直居中" class="headerlink" title="让一个元素水平垂直居中"></a>让一个元素水平垂直居中</h3><p>如何使行内元素居中： 在包裹它父盒子里添加 text-align：center  height和line-height 一致</p><p>行内水平居中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>行内元素居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* text-align: center;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            line-height: 40px; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>块级元素居中：</p><p>1.使用absolute 定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>块级元素布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>); <span class="comment">/*平移自身宽高的50%*/</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* margin-left: -50px;   或者是添加margin left</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin-top:-50px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1、绝对定位方法：不确定当前 div 的宽度和高度，采用 left: 50%; top: 50%; transform:</p><p>translate(-50%,-50%); 当前 div 的父级添加相对定位（position: relative;）</p><p>2.确定了当前 div 的宽度，margin 值为当前 div 宽度一半的负值</p><p>3margin为auto</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>块级元素布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*transform:translate(-50%,-50%); 平移自身宽高的50% */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* margin-left: -50px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin-top:-50px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>; </span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4 flex 布局 当前div 的父组件添加 flex css</p><p>align-items: center;      &#x2F;&#x2F;项目在竖轴的对齐方式 justify-content: center;  &#x2F;&#x2F;主轴上的对齐方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>块级元素对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5 display: table-cell;             vertical-align: middle; text-align: center; 子元素是 inline-blocl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>块级元素对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>块级元素对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="样式预处理器"><a href="#样式预处理器" class="headerlink" title="样式预处理器"></a>样式预处理器</h3><p>sass 的作用 可以写变量，写嵌套，写混合</p><h3 id="dom事件流"><a href="#dom事件流" class="headerlink" title="dom事件流"></a>dom事件流</h3><p>1.捕获阶段    文档-》html-》body-》目标dom  从window到目标元素向下逐层触发事件</p><p>2.目标阶段    触发目标元素的事件，执行回调函数</p><p>3.冒泡阶段   目标dom-》body-》html-》文档  从目标元素到window向上逐步触发</p><h3 id="冒泡模式下事件触发"><a href="#冒泡模式下事件触发" class="headerlink" title="冒泡模式下事件触发"></a>冒泡模式下事件触发</h3><p>第二个参数默认为false 会触发冒泡事件</p><p>这里假设 祖父dom ，父亲dom ，儿子dom 都绑定了一个click事件</p><p>先触发儿子，依次触发父亲和祖父的事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>冒泡事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#grandfather</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#father</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#son</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;grandfather&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> grandfather=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#grandfather&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> father=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> son=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        grandfather.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是爷爷&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是父亲&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">           <span class="comment">// event.stopPropagation(); // 可以 设置为阻止事件触发</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是儿子&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="捕获模式事件触发"><a href="#捕获模式事件触发" class="headerlink" title="捕获模式事件触发"></a>捕获模式事件触发</h3><p>第二个参数设置为true </p><p>先触发祖父 事件 -》触发父亲的事件-》触发儿子的事件</p><h3 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h3><p>在冒泡模式下</p><p>比如 父亲设置了 event.stopPropagation();   事件触发的时候就会  触发儿子和父亲的事件 但是不会触发祖父的事件</p><h3 id="event-target和this在事件处理程序中的区别"><a href="#event-target和this在事件处理程序中的区别" class="headerlink" title="event.target和this在事件处理程序中的区别"></a>event.target和this在事件处理程序中的区别</h3><p>event.targ指向实际点击到的元素，this是事件绑定到的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 获取ul元素</span></span><br><span class="line">   <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">   <span class="comment">// 2. 给ul添加点击事件</span></span><br><span class="line">   ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">// 3. 在事件处理程序中打印，当前点击的元素的内容</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerHTML</span>);</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  </span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="点击事件的判断"><a href="#点击事件的判断" class="headerlink" title="点击事件的判断"></a>点击事件的判断</h3><p>点击之后300ms以内再次点击就是双击 ，移动端的点击穿透，两元素叠放在一起时 可能触发 toouchend 和 click 使用fastclick.js 去除</p><h3 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h3><p>在事件回调里面设置 ：event.preventDefault()  比如可以阻止a 标签的跳转功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 获取a元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 2. 绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">a.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 3. 添加事件处理程序，阻止默认事件</span></span></span><br><span class="line"><span class="language-javascript">  event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>事件绑定在父盒子上，对应的子盒子就会都绑定上这个事件，不需每个子对象一一绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 通过 event.tartget 得到子元素</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> ul=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">       ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">       &#125;)</span></span><br><span class="line"><span class="language-javascript">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h3><p>opticity:0  会占位子，也会触发事件</p><p>visibility:hidden 继续占据空间，触发重绘，不会触发事件，继承属性</p><p>diplay:none 不占据空间 （触发回流和重绘）</p><h3 id="伪类和伪元素选择"><a href="#伪类和伪元素选择" class="headerlink" title="伪类和伪元素选择"></a>伪类和伪元素选择</h3><p>伪类：<br>:active，将样式添加到被激活的元素。</p><p>:focus，将样式添加到被选中的元素。</p><p>:hover，当鼠标悬浮在元素上方是，向元素添加样式。</p><p>:link，将特殊的样式添加到未被访问过的链接。</p><p>:visited，将特殊的样式添加到被访问的链接。</p><p>:first-child，将特殊的样式添加到元素的第一个子元素。</p><p>:lang，允许创作者来定义指定的元素中使用的语言。</p><p>伪元素： 有两个：：<br>:first-letter，将特殊的样式添加到文本的首字母。</p><p>:first-line，将特殊的样式添加到文本的首行。</p><p>:before，在某元素之前插入某些内容。</p><p>:after，在某元素之后插入某些</p><h3 id="动画的基本属性设置"><a href="#动画的基本属性设置" class="headerlink" title="动画的基本属性设置"></a>动画的基本属性设置</h3><p>transition-property<br>设置过渡的属性，比如：width height background-color</p><p>transition-duration<br>设置过渡的时间，比如：1s 500ms</p><p>transition-timing-function<br>设置过渡的运动方式，常用有 linear(匀速)|ease(缓冲运动)</p><p>transition-delay<br>设置动画的延迟</p><p>transition:<br>property duration timing-function delay 同时设置四个属性</p><h3 id="如何避免重绘和重排"><a href="#如何避免重绘和重排" class="headerlink" title="如何避免重绘和重排"></a>如何避免重绘和重排</h3><p>什么是重排什么是重绘：浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。 重绘：当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，所以重绘跳过了创建布局树和分层的阶段。 重排需要重新计算布局树，重绘不需要，重排必定发生重绘，但是涉及到重绘不一定要重排。</p><p>页面初始化的时候会触发重排 </p><p>resize 事件（：hover），改变style 中会改变dom 大小布局的属性</p><p>避免的方法: 1集中修改样式 2 使用 absolute fixed 等脱离文档流 3.GPU加速</p><h3 id="css-继承性"><a href="#css-继承性" class="headerlink" title="css 继承性"></a>css 继承性</h3><p>常用的css可继承的属性：<br>font：组合字体</p><p>font-family：规定元素的字体系列</p><p>font-weight：设置字体的粗细</p><p>font-size：设置字体的尺寸</p><p>font-style：定义字体的风格</p><p>text-indent：文本缩进</p><p>text-align：文本水平对齐</p><p>line-height：行高</p><p>color：文本颜色</p><p>visibility：元素可见性</p><p>光标属性：cursor</p><p>行内元素：span a br  b strong img input</p><p>空元素：br hr img input link meta</p><p>获取表单元素：</p><p>根据id 获取元素<br>document.getElementById(“id属性的值”);</p><p>根据标签名字获取元素<br>document.getElementsByTagName(“标签的名字”);</p><p>根据name 属性的值获取元素<br>document.getElementsByName(“name属性的值”);</p><p>根据类样式的名字获取元素<br>document.getElementsByClassName(“类样式的名字”);</p><p>根据选择器获取元素</p><p>document.querySelector(“选择器”);<br>document.querySelectorAll(“选择器”);</p><p>浏览器基本原理</p><p>浏览器是多进程的，js 的执行是单线程的</p><p>浏览器 分为 GPU,主进程，渲染进程，网络进程，插件进程</p><h3 id="h5-的新特性"><a href="#h5-的新特性" class="headerlink" title="h5 的新特性"></a>h5 的新特性</h3><p>新增的选择器  querySeletctor，qeryselectorAll</p><p>拖拽 API</p><p>媒体播放标签 video  和 audio</p><p>本地存储 localStorage 和 SessionStorage</p><p>语义化标签，增强表单控件</p><p>地理位置 定位 .多任务 webwork ，全双工websocket ，绘画canvas</p><p>hsitory 历史管理</p><h3 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h3><p>伪类：当元素处于某种状态的时候对其添加某种样式</p><p>伪元素：在元素里面添加一些非 dom 的元素</p><p>13 audio 标签的api</p><h3 id="audio-标签常用属性"><a href="#audio-标签常用属性" class="headerlink" title="audio 标签常用属性"></a>audio 标签常用属性</h3><p>src &#x2F;url     preload 预加载   loop循环播放   controls是否显示默认控制条 autoplay 自动播放</p><p>支持的格式包括 ogg MP3 wav</p><p>audio 自代的一些属性 duration、paused 、ended、muted 、volueme（控制音量属性 0-1） 、startTime、error返回错误代码  currentTime 用来控制播放时间  currentSrc 正在播放和已经加载的文件</p><p>常用的 控制用的的函数</p><p>load（） &#x2F;play（)&#x2F;pause&#x2F;ended 播放结束 timeupdate</p><h3 id="移动端布局方案"><a href="#移动端布局方案" class="headerlink" title="移动端布局方案"></a>移动端布局方案</h3><p>1.流式布局（百分比） 不可以改变字体的大小，可以改元素的大小，高度固定</p><p>2.flex 布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>移动端布局flex<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-wrap</span>:wrap;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex</span>:<span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.rem +媒体查询</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>clearfix方法,在父盒子中添加 clearfix 的类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after&#123;</span><br><span class="line">   content: &#x27;&#x27;;</span><br><span class="line">   display: table;</span><br><span class="line">   clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给父元素添加overflow：hidden  该方法有缺陷</p><h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><p>flex 布局可以分为 外部的容器和内部的子元素  通过设置父盒子属性和子盒子的属性来实现弹性布局</p><p>相关链接 ：<a href="https://juejin.cn/post/6881565341856563213">Flex布局\弹性布局–面试题 - 掘金 (juejin.cn)</a></p><p>元素结构：设置一个父盒子 dispaly：flex   子盒子是里面的flex-item</p><h4 id="flex-容器的属性-父盒子的属性"><a href="#flex-容器的属性-父盒子的属性" class="headerlink" title="flex 容器的属性(父盒子的属性)"></a>flex 容器的属性(父盒子的属性)</h4><p>flex-direction：row &#x2F;row-reverse&#x2F;column&#x2F;column-reverse  进行排列顺序的设置</p><p>justify-content： flex-start&#x2F;flex-end&#x2F;space-between&#x2F;center&#x2F;spce-around  设置间隔模式</p><p>flex-wrap：nowrap&#x2F;wrap&#x2F;wrap-reverse</p><p>align-content: flex-start&#x2F;flex-end&#x2F;center&#x2F;space-between&#x2F;space-around</p><h4 id="flexitem的属性（子盒子的属性）"><a href="#flexitem的属性（子盒子的属性）" class="headerlink" title="flexitem的属性（子盒子的属性）"></a>flexitem的属性（子盒子的属性）</h4><p>order：1  填写数学、数字大就往后排</p><p>flex-grow 定义子盒子的放大倍数</p><p>flex-shrink 定义子盒子的缩小倍数</p><p>flex-basis 分配多余空间之前项目占据主轴空间的大小</p><p>align-self：属性运行单个项目和其他项目不一样的对齐方式</p><p>案例：骰子三点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>flex 布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>:  <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>:solid <span class="number">1px</span> <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>:  <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-self</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-self</span>: flex-end;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web-component-和shadow-dom"><a href="#web-component-和shadow-dom" class="headerlink" title="web component 和shadow dom"></a>web component 和shadow dom</h3><p>web component是自定义标签，还要声明自定义组件类</p><p>showdom 用来隐藏自定义组件内容</p><h3 id="移动端的常见写法"><a href="#移动端的常见写法" class="headerlink" title="移动端的常见写法"></a>移动端的常见写法</h3><p>rem+viewport 布局</p><p>移动端 meta 的常用值，width，height，initial-scale，maximum-scale,user-scalable</p><p>width 定义视口的宽度，height 定义视口的高度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="点击事件延迟与穿透"><a href="#点击事件延迟与穿透" class="headerlink" title="点击事件延迟与穿透"></a>点击事件延迟与穿透</h3><p>监听元素 click 事件，点击元素触发时间</p><p>点击蒙层，蒙层消失后，下层元素点击触发</p><p>​click 延迟是用来判断单双击操作的 <code>click</code> 单击都会产生 300ms 延迟</p><p>   双层元素叠加时，在上层元素上绑定 <code>touch</code> 事件，下层元素绑定 <code>click</code> 事件。由于 <code>click</code> 发生在 <code>touch</code> 之后，点击上层元素，元素消失，下层元素会触发 <code>click</code> 事件，由此产生了点击穿透的效果。</p><p>解决方法：</p><p>将 <code>click</code> 替换成 <code>touchstart</code> 不仅解决了 <code>click</code> 事件都延时问题，还解决了穿透问题。因为穿透问题是在 <code>touch</code> 和 <code>click</code> 混用时产生。</p><p>使用 fastclick 库</p><p>iphoneX 系列安全适配问题</p><p>头部刘海两侧区域或者底部区域，出现刘海遮挡文字，或者呈现黑底或白底空白区域。 viewport-fit&#x3D;cover</p><h3 id="如何会触发重排和重绘"><a href="#如何会触发重排和重绘" class="headerlink" title="如何会触发重排和重绘"></a>如何会触发重排和重绘</h3><p>1.添加、删除、更新Dom节点</p><p>2.通过display：none 隐藏一个Dom</p><p>3 visibility ：hidden 会触发重绘</p><p>4 移动或者给页面中Dom 节点添加动画</p><p>5 添加一个样式表，调整样式属性</p><p>6 用户行为，例如 调整字号</p><h3 id="如何解决重绘和重排"><a href="#如何解决重绘和重排" class="headerlink" title="如何解决重绘和重排"></a>如何解决重绘和重排</h3><p>1.集中改变样式</p><p>2.不要把Dom节点的属性放在循环里面作为循环</p><p>3.动画最后放再 fixed，abslute postition</p><p>4修改格式最好修改 position里面的</p><p>5 动画使用GPU加速</p><h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><h3 id="圣杯和双飞翼的区别："><a href="#圣杯和双飞翼的区别：" class="headerlink" title="圣杯和双飞翼的区别："></a>圣杯和双飞翼的区别：</h3><p>圣杯有一个公共的父盒子的padding，双飞翼是中间盒子的margin</p><h4 id="圣杯布局的实现方案"><a href="#圣杯布局的实现方案" class="headerlink" title="圣杯布局的实现方案"></a>圣杯布局的实现方案</h4><p>三个元素放在同一个父级元素中，</p><p>1.代表中间盒子的元素放在最前面，</p><p>2，三个盒子全部浮动</p><p>3，父级盒子设置左右<code>padding</code>，</p><p>4，中间盒子100%  pading 的宽度一般与左右两个一致 左右两个盒子的宽度固定，</p><p>5，左侧盒子：margin-left :-100%   position:relative; right:200px  进行平移</p><p>6，右侧盒子 margin-right：-200px   平移到上层</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>:bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#header</span>,<span class="selector-id">#footer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">29</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">0.726</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#footer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>:both</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#container</span> <span class="selector-class">.column</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#center</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">206</span>,<span class="number">201</span>,<span class="number">201</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">             <span class="attribute">right</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>:-<span class="number">100%</span>; </span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">95</span>,<span class="number">179</span>,<span class="number">235</span>,<span class="number">0.972</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#right</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>:-<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>:-<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">231</span>,<span class="number">105</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><p>1,中间盒子放在前面</p><p>2，全部浮动</p><p>3，中间盒子加一个子盒子 c-inner  设置左右margin 值具体的值与左右盒子的宽度有关</p><p>5，左侧盒子：margin-left :-100%   position:relative; right:200px  进行平移</p><p>6，右侧盒子 margin-right：-200px   平移到上层</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-width</span>: <span class="number">550px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>:bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#header</span>,<span class="selector-id">#footer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">29</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">0.726</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#footer</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>:both</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#container</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* padding-left: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            padding-right: 150px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#container</span> <span class="selector-class">.column</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#center</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">206</span>,<span class="number">201</span>,<span class="number">201</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c-inner</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#left</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">95</span>,<span class="number">179</span>,<span class="number">235</span>,<span class="number">0.972</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#right</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>:-<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>:-<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">231</span>,<span class="number">105</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c-inner&quot;</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="grid布局和flex区别"><a href="#grid布局和flex区别" class="headerlink" title="grid布局和flex区别"></a>grid布局和flex区别</h3><p>flexbox 是一个一维布局系统适合做局部布局，比如导航栏组件 一次只能处理一个维度上的的布局</p><p>grid 是一个二维布局用于整体布局</p><p>flex 常用的属性 flex-direction ，flex-wrap ，flex-flow，justify-content  align-items aligb-content</p><p>flex-grow  flex-shrink   flex-basis</p><h3 id="如何用CSS设计一个三角形"><a href="#如何用CSS设计一个三角形" class="headerlink" title="如何用CSS设计一个三角形"></a>如何用CSS设计一个三角形</h3><p>使用border 属性  1：宽高为0  设置 border 的颜色 和线的属性  （要哪个方向的三角形就给颜色 其他透明）</p><p>linear-gradient  需要结合 background-image 来实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">50px</span> solid skyblue;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件引入的方式"><a href="#文件引入的方式" class="headerlink" title="文件引入的方式"></a>文件引入的方式</h3><p>link 标签引入 和 @import 的使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> url(index.css);</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="link-和-import-的区别"><a href="#link-和-import-的区别" class="headerlink" title="link 和 @import 的区别"></a>link 和 @import 的区别</h3><p>1.引入的内容不同，link 除了引用样式文件，还可以引用图片等资源文件，而 @import 只引用样式文件 </p><p>2.加载顺序不同，link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载 </p><p>3.兼容性不同，link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持 </p><p>4.对js 的支持不同，link 支持使用 Javascript 控制 DOM 去改变样式；而 @import 不支持 </p><h3 id="link-用-href获取资源-script-和img-用src"><a href="#link-用-href获取资源-script-和img-用src" class="headerlink" title="link 用 href获取资源 script 和img 用src"></a>link 用 href获取资源 script 和img 用src</h3><p>src 用来替换当前元素 ，href 是建立 文档与引用资源的联系</p><p>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素，src 会暂停其他资源的下载和处理</p><p>href 会并行处理下载不会停止对当前文档的加载  </p><h3 id="文件异步上传："><a href="#文件异步上传：" class="headerlink" title="文件异步上传："></a>文件异步上传：</h3><p>1.普通表单如何上传</p><p>2.文件编码上传 img</p><p>3.formData</p><p>Diff 算法 </p><h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><p>css 兼容问题</p><p>不同的浏览器的margin padding是不同  opcity</p><p>在css 属性前面添加前缀，border </p><p>Chrome 和 safari  使用 webkit</p><p>is     -ms-</p><p>火狐  -moz-</p><p>js 兼容的问题 </p><p>如事件绑定 event 事件，getElementsByClass，queryselecto</p><h2 id="JS-x2F-vue内容"><a href="#JS-x2F-vue内容" class="headerlink" title="JS&#x2F;vue内容"></a>JS&#x2F;vue内容</h2><h3 id="JS的变量提升"><a href="#JS的变量提升" class="headerlink" title="JS的变量提升"></a>JS的变量提升</h3><p>会对变量进行声明 提到代码执行的最前面 比如 var myname &#x3D;undefined 提到最前面 赋值放在原来的位置</p><p>let 和const 变量会出现死区 ，var会进行变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname);</span><br><span class="line"><span class="keyword">var</span> myname=<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// 实际上运行的时候是以下这种情况</span></span><br><span class="line"><span class="keyword">var</span> myname = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myname);</span><br><span class="line">myname=<span class="string">&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure><p>Js：代码执行过程</p><p>编译开始-》代码进行用户会创建变量环境（var 变量的申明undefined，函数体）-》可执行代码（赋值操作，函数执行）</p><p>var 和函数 同名函数声明（var和函数重名也一样），后面的函数或体会覆盖上一次的函数体</p><p>分析的时候先进行变量，function的提升之后进行执行代码的分析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例1</span></span><br><span class="line"><span class="title function_">showName</span>()</span><br><span class="line"><span class="keyword">var</span> showName =<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="title function_">showName</span>()</span><br><span class="line"><span class="comment">//实际运行情况如下</span></span><br><span class="line"><span class="keyword">var</span> showName =<span class="literal">undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="comment">// 代码执行</span></span><br><span class="line"><span class="title function_">showName</span>()</span><br><span class="line">showName =<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)&#125;</span><br><span class="line"><span class="title function_">showName</span>()  <span class="comment">// 先输出1然后输出2</span></span><br><span class="line"><span class="comment">// 案例2</span></span><br><span class="line"><span class="keyword">var</span> showName = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">showName</span>();</span><br><span class="line"><span class="keyword">var</span> showName =<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="comment">// 编译执行时</span></span><br><span class="line"><span class="keyword">var</span> showName = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="comment">// 执行阶段</span></span><br><span class="line">showName = <span class="number">1</span>;</span><br><span class="line"><span class="title function_">showName</span>(); <span class="comment">// 错误</span></span><br><span class="line">showName =<span class="keyword">function</span> (<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)&#125;；</span><br></pre></td></tr></table></figure><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><p>1.在执行之前就进行编译并且创建执行上下文，在整个页面的生命周期里全局执行上下文只有一份</p><ol start="2"><li><p>当调用一个函数的时候，函数体内的代码会进行编译，并且创建函数执行上下文，函数执行结束的时候会删除函数上下文</p></li><li><p>当使用eval  函数的时候eval 的代码会被编译，并且创建上下文（不经常使用）</p><p>全局上下文与函数上下文详解案例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line">fuction <span class="title function_">sum</span>(<span class="params">b,c</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> b+c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addSum</span>(<span class="params">d,e</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> f=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> result =<span class="title function_">sum</span>(d,e);</span><br><span class="line">    <span class="keyword">return</span> a+result+f</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">addSum</span>(<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">// 1.创建全局上下文-变量环境 压入栈底</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addSum</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="comment">// 2.调用代码执行</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line"><span class="title function_">addSum</span>(<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line"><span class="comment">// 3.执行 addSum(3,6) 调用 addSum函数 JavaScript会编译该函数，创建一个函数执行上下文，将该函数压入执行栈</span></span><br><span class="line"><span class="comment">// 函数上下文</span></span><br><span class="line"> <span class="keyword">var</span> f =<span class="literal">undefined</span>;</span><br><span class="line"> <span class="keyword">var</span> result=<span class="literal">undefined</span>;</span><br><span class="line">   d=<span class="number">3</span>;</span><br><span class="line">   e=<span class="number">6</span>;</span><br><span class="line"> <span class="comment">// 函数内部执行代码</span></span><br><span class="line">   f=<span class="number">10</span>;</span><br><span class="line">   result=<span class="title function_">sum</span>(d,e)</span><br><span class="line"> <span class="comment">// sum 推入调用栈中</span></span><br><span class="line">  <span class="comment">// 创建sum函数的上下文</span></span><br><span class="line">     b=<span class="number">3</span> c=<span class="number">6</span></span><br><span class="line">  <span class="comment">// 执行函数</span></span><br><span class="line">     <span class="number">3</span>+<span class="number">6</span></span><br><span class="line">  <span class="comment">// 4. sum 弹出执行栈返回 9 弹出时会清空对应的函数上下文</span></span><br><span class="line">     <span class="comment">// 执行 </span></span><br><span class="line">     result=<span class="number">9</span>;</span><br><span class="line">      <span class="number">9</span>+a+f 返回 <span class="number">20</span></span><br><span class="line"> <span class="comment">//  5.addSum 弹出执行栈 返回20 弹出时会清空对应的函数上下文</span></span><br><span class="line">      <span class="title function_">addSum</span>()函数执行完成</span><br><span class="line">  <span class="comment">// 只要页面在，全局上下文就存在</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="MVC和mvvm的区别"><a href="#MVC和mvvm的区别" class="headerlink" title="MVC和mvvm的区别"></a>MVC和mvvm的区别</h3><p>MVC 是应用广泛的软件框架 model（模型）View（视图）Contriol（控制）</p><p>View一般用过Controller来和Model进行联系。Controller是Model和View的协调者,View和Model不直接联系。基本都是单向联系。Controller是Model和View的协调者,View和Model不直接联系。基本都是单向联系。</p><p>MVVM：MVVM 是把MVC 中的 Control 变为了 ViewModel，View的变化会自动更新到viewModel，ViewModel 的变化会更新到视图层</p><ul><li><p>相同点</p><p>View和Model的自动同步</p><ul><li>当Model属性改变时，不用手动操作Dom元素去改变View的显示。</li><li>而改变属性后，该属性对应View的显示会自动改变</li></ul></li></ul><h3 id="单页面应用的优缺点"><a href="#单页面应用的优缺点" class="headerlink" title="单页面应用的优缺点"></a>单页面应用的优缺点</h3><p>1，良好的交互体验，不需要重新加载页面不会出现白屏现象</p><p>2，良好的前后端 分离工作分离，页面渲染都在前端进行</p><p>3，减轻服务端压力</p><p>缺点：<br>  首屏加载慢，在第一次加载全部组件</p><p> 通过查看 首次加载首页需要加载大量文件</p><p>解决方法：</p><p>使用路由懒加载</p><p>使用CDN 加速</p><p>异步加载组件</p><p>服务端渲染</p><p>大型项目不适应，不利于SEO</p><h3 id="框架的优缺点"><a href="#框架的优缺点" class="headerlink" title="框架的优缺点"></a>框架的优缺点</h3><ol><li>组件化：其中以react的组件化最为彻底，甚至可以到函数级别的原子组件，高度的组件化可以使我们的工程易于维护，易于组合扩展；</li><li>天然分层：jQuery时代的代码大部分情况下是面条代码，耦合严重，现代框架不管是MVC、MVP还是MVVM模式都可以帮我们进行分层，代码解耦更易于读写；</li><li>生态：现代主流框架都自带生态，不管是数据流管理架构还是UI库都有成熟的解决方案；</li><li>开发效率：现在前端框架都默认自动更新DOM，而非我们手动操作，解放了开发者的手动DOM成本，提高开发效率，从根本上解决了UI与状体同步问题。</li></ol><p>劣势：</p><ol><li>兼容性问题，SEO不友好</li><li>有场景要求，开发自由度降低</li><li>有黑盒开发，框架本身有出错的风险</li><li>有学习成本</li></ol><h3 id="什么是模块化、组件化、工程化"><a href="#什么是模块化、组件化、工程化" class="headerlink" title="什么是模块化、组件化、工程化"></a>什么是模块化、组件化、工程化</h3><p>而模块化和组件化是为工程化思想下相对较具体的开发方式，因此可以简单的认为模块化和组件化是工程化的表现形式。工程化是将前端项目当成一项系统工程进行分析、组织和构建从而达到项目结构清晰、分工明确、团队配合默契、开发效率提高的目的。</p><p>一个模块就是一个实现特定功能的文件，有了模块我们就可以更方便的使用别人的代码，要用什么功能就加载什么模块。</p><p>js模块化方案很多有AMD、CommonJS、UMD、ES6 Module等。css模块化开发大多数是在less、sass、stylus等预处理器的import、minxin特性支持下实现。</p><ul><li><p>避免变量污染，命名冲突</p></li><li><p>提高代码复用率</p></li><li><p>提高维护性</p></li><li><p>依赖关系的管理</p></li><li><p>页面上的每个独立的、可视&#x2F;可交互区域视为一个组件</p><p>每个组件对应一个工程目录，组件所需的各种资源都在这个目录下就近维护；由于组件具有独立性，因此组件与组件之间可以自由组合；页面不过是组件的容器，负责组合组件形成功能完整的界面；</p></li></ul><p>页面上的每个独立的、可视&#x2F;可交互区域视为一个组件</p><p>每个组件对应一个工程目录，组件所需的各种资源都在这个目录下就近维护；由于组件具有独立性，因此组件与组件之间可以自由组合；页面不过是组件的容器，负责组合组件形成功能完整的界面；</p><h3 id="JS-中常用的数组方法"><a href="#JS-中常用的数组方法" class="headerlink" title="JS 中常用的数组方法"></a>JS 中常用的数组方法</h3><p>数组转化为字符串 toString（）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = fruits.<span class="title function_">toString</span>(); </span><br><span class="line"><span class="comment">// 输出 Banana,Orange,Apple,Mango</span></span><br></pre></td></tr></table></figure><p>join （） 方法将所有的数组元素结合为一个字符串，将所有的数组元素结合可以规定分割符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>,<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = fruits.<span class="title function_">join</span>(<span class="string">&quot; * &quot;</span>); </span><br><span class="line"><span class="comment">// 输出 Banana * Orange * Apple * Mango</span></span><br></pre></td></tr></table></figure><p>pop() 删除最后一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">pop</span>();              <span class="comment">// 从 fruits 删除最后一个元素（&quot;Mango&quot;）返回的是弹出的元素</span></span><br></pre></td></tr></table></figure><p>push（）方法返回 向数组后面添加一个新元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">push</span>(<span class="string">&quot;Kiwi&quot;</span>);       <span class="comment">//  向 fruits 添加一个新元素  返回的新数组的长度</span></span><br></pre></td></tr></table></figure><p>位移元素 </p><p>shift（）方法会删除第一个元素，把其他的元素移动前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">shift</span>();            <span class="comment">// 从 fruits 删除第一个元素 &quot;Banana&quot; 返回值是删除的元素</span></span><br></pre></td></tr></table></figure><p>unshift()方法，向数组里面添加新的元素（）头部插入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">unshift</span>(<span class="string">&quot;Lemon&quot;</span>);    <span class="comment">// 返回 新数组的长度</span></span><br></pre></td></tr></table></figure><p>更改数组的值 【index】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits[<span class="number">0</span>] = <span class="string">&quot;Kiwi&quot;</span>;        <span class="comment">// 把 fruits 的第一个元素改为 &quot;Kiwi&quot;</span></span><br></pre></td></tr></table></figure><p>length 追加新元素的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// length 属性提供了向数组追加新元素的简易方法：</span></span><br></pre></td></tr></table></figure><p>delete 删除元素(会留下undefined)最好采用 pop 和 shift</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">delete</span> fruits[<span class="number">0</span>];           <span class="comment">// 把 fruits 中的首个元素改为 undefined</span></span><br></pre></td></tr></table></figure><p>splice()  拼接元素&#x2F;插入元素&#x2F;删除数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;Lemon&quot;</span>, <span class="string">&quot;Kiwi&quot;</span>);</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">//原数组：</span></span><br><span class="line"><span class="comment">//Banana,Orange,Apple,Mango</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新数组：</span></span><br><span class="line"><span class="comment">//Banana,Orange,Lemon,Kiwi,Apple,Mango</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;Lemon&quot;</span>, <span class="string">&quot;Kiwi&quot;</span>);</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">//返回的是去掉的值</span></span><br><span class="line"><span class="comment">//原数组：</span></span><br><span class="line"><span class="comment">//Banana,Orange,Apple,Mango</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新数组：</span></span><br><span class="line"><span class="comment">//Banana,Orange,Lemon,Kiwi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//已删除项：</span></span><br><span class="line"><span class="comment">//Apple,Mango</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>);        <span class="comment">// 删除 fruits 中的第一个元素</span></span><br></pre></td></tr></table></figure><p>第一个参数（2）定义了应添加新元素的位置（拼接）。</p><p>第二个参数（0）定义应删除多少元素。</p><p>其余参数（“Lemon”，“Kiwi”）定义要添加的新元素。</p><p><code>splice()</code> 方法返回一个包含已删除项的数组：</p><p>数组合并 contact（）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myGirls = [<span class="string">&quot;Cecilie&quot;</span>, <span class="string">&quot;Lone&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> myBoys = [<span class="string">&quot;Emil&quot;</span>, <span class="string">&quot;Tobias&quot;</span>, <span class="string">&quot;Linus&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> myChildren = myGirls.<span class="title function_">concat</span>(myBoys);   <span class="comment">// 连接 myGirls 和 myBoys</span></span><br><span class="line"><span class="comment">// 与实际值进行合并</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;Cecilie&quot;</span>, <span class="string">&quot;Lone&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> myChildren = arr1.<span class="title function_">concat</span>([<span class="string">&quot;Emil&quot;</span>, <span class="string">&quot;Tobias&quot;</span>, <span class="string">&quot;Linus&quot;</span>]); </span><br></pre></td></tr></table></figure><p>合并三个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;Cecilie&quot;</span>, <span class="string">&quot;Lone&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&quot;Emil&quot;</span>, <span class="string">&quot;Tobias&quot;</span>, <span class="string">&quot;Linus&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&quot;Robin&quot;</span>, <span class="string">&quot;Morgan&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> myChildren = arr1.<span class="title function_">concat</span>(arr2, arr3);   <span class="comment">// 将arr1、arr2 与 arr3 连接在一起</span></span><br></pre></td></tr></table></figure><p>slice  剪裁数组 重新创建一个数组，返回剪裁出来的部分</p><p>一个参数 ：开始剪裁的位置 取后面的部分</p><p>两个参数：起始位置   终止位置后面一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Lemon&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> citrus = fruits.<span class="title function_">slice</span>(<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Lemon&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> citrus = fruits.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>); </span><br></pre></td></tr></table></figure><p>数组排序 sort（） 以字母顺序排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">sort</span>();            <span class="comment">// 对 fruits 中的元素进行排序</span></span><br><span class="line"><span class="comment">// 升序排序</span></span><br><span class="line"><span class="keyword">var</span> points = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>];</span><br><span class="line">points.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123;<span class="keyword">return</span> a - b&#125;); </span><br><span class="line"><span class="comment">// 降序排序</span></span><br><span class="line"><span class="keyword">var</span> points = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>];</span><br><span class="line">points.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123;<span class="keyword">return</span> b - a&#125;); </span><br></pre></td></tr></table></figure><p>以随机顺序排列数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> points = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>];</span><br><span class="line">points.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123;<span class="keyword">return</span> <span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>()&#125;); </span><br></pre></td></tr></table></figure><p>找最值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> points = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>];</span><br><span class="line">points.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123;<span class="keyword">return</span> a - b&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 points[0] 包含最低值</span></span><br><span class="line"><span class="comment">// 而 points[points.length-1] 包含最高值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> points = [<span class="number">40</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">25</span>, <span class="number">10</span>];</span><br><span class="line">points.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123;<span class="keyword">return</span> b - a&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 points[0] 包含最高值</span></span><br><span class="line"><span class="comment">// 而 points[points.length-1] 包含最低值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myArrayMax</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myArrayMin</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找最值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) 等于 <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组迭代"><a href="#数组迭代" class="headerlink" title="数组迭代"></a>数组迭代</h4><p>Array.forEach()  对每个数组元素进行操作,会修改原数组， 不需要return</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  txt = txt + value + <span class="string">&quot;&lt;br&gt;&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Array.map() map方法通过对每个数组元素执行函数来创建新的数组，不会对没有值的数组进行，需要return</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers1 = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">var</span> numbers2 = numbers1.<span class="title function_">map</span>(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Array.filter() 过滤满足添加的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">var</span> over18 = numbers.<span class="title function_">filter</span>(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Array.reduce()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers1 = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">var</span> sum = numbers1.<span class="title function_">reduce</span>(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">total, value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> total + value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以加入一个初始值</span></span><br></pre></td></tr></table></figure><ul><li>总数（初始值&#x2F;先前返回的值）</li><li>项目值</li><li>项目索引</li><li>数组本身</li></ul><p>Array.reduceRight()</p><p>Array.reduceRight()</p><p><code>reduceRight()</code> 方法在每个数组元素上运行函数，以生成（减少它）单个值。</p><p><code>reduceRight()</code> 方法在数组中从右到左工作。另请参阅 reduce()。</p><p><code>reduceRight()</code> 方法不会减少原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers1 = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">var</span> sum = numbers1.<span class="title function_">reduceRight</span>(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">total, value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> total + value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Array.every</p><p>every 方法检测是否所有的元素都满足条件 ,返回boolean 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">var</span> allOver18 = numbers.<span class="title function_">every</span>(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>some 值检验是否有元素满足条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">45</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>];</span><br><span class="line"><span class="keyword">var</span> someOver18 = numbers.<span class="title function_">some</span>(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Array.indexOf（）</p><p><code>indexOf()</code> 方法在数组中搜索元素值并返回其位置。 没有找到就返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> a = fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"><span class="comment">// start 是开始位置</span></span><br><span class="line">array.<span class="title function_">indexOf</span>(item, start)</span><br></pre></td></tr></table></figure><p><code>Array.lastIndexOf()</code> 与 <code>Array.indexOf()</code> 类似，但是从数组结尾开始搜索。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">lastIndexOf</span>(item, start)</span><br></pre></td></tr></table></figure><p>Array.find()  返回第一个满足条件的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">29</span>];</span><br><span class="line"><span class="keyword">var</span> first = numbers.<span class="title function_">find</span>(myFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params">value, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">18</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Array.findIndex() 返回第一个满足条件 的元素坐标</p><h3 id="JS-垃圾回收机制"><a href="#JS-垃圾回收机制" class="headerlink" title="JS 垃圾回收机制"></a>JS 垃圾回收机制</h3><p>项目中，如果存在大量不被释放的内存，页面性能就会变差，尽量减少闭包的使用</p><p>1.标记清除,最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为“进入环境”，当变量离开执行环境时，会被标记为“离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。</p><p>2.谷歌浏览器 浏览器会不定时去查找当前内存的引用，如果没有占用浏览器会回收</p><p>内存优化：手动释放：取消内存占用即可</p><p>堆内存： fn &#x3D;null</p><p>  栈内存： 把上下文中，被外部占用的堆的占用取消即可</p><p>内存泄漏 ：一般是4种 ，全局变量，闭包，DOM 元素的引用、定时器</p><p>作用域链：般情况下，变量到 创建该变量 的函数的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p><h3 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h3><p>const let 类型声明  模板字符串 箭头函数  ，参数的默认赋值  spuer    symbol  bigint   for in  for of  数组的方法拓展  promise  Generator</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>全局作用域，函数作用域，块级作用域（if  while for {}）</p><p>let 和 const 变量只作用于块级，超过作用域就失效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 输出100</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>案例题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每秒打出一个自增的自然数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;,<span class="number">1000</span>*<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果i 是var 来代替let时会出现 10个setTimeout 不过都会等到for循环后执行 输出 10个是10</span></span><br><span class="line"><span class="comment">// 如果是 let 为变量类型的时候会被解析成一个个的代码 块进行处理</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> i =<span class="number">0</span>；</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>( <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;)</span><br><span class="line">&#125;...</span><br><span class="line"><span class="comment">// 变量提升的产生的问题 案例2</span></span><br><span class="line"><span class="keyword">var</span> myname=<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">//输出 undefined</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> myname=<span class="string">&#x27;李四&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    consol.<span class="title function_">log</span>(myName); <span class="comment">//输出 undefined</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="title function_">showName</span>()</span><br><span class="line"><span class="comment">// 对代码进行编译</span></span><br><span class="line"><span class="keyword">var</span> myname=<span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="comment">// 执行阶段</span></span><br><span class="line">myname=<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="title function_">showName</span>()</span><br><span class="line"><span class="comment">// 解析函数，创建函数上下文</span></span><br><span class="line"><span class="comment">//因为 var 不受块级作用域的约束,申明会提升，赋值不会提升</span></span><br><span class="line"> <span class="keyword">var</span> myname=<span class="literal">undefined</span>;</span><br><span class="line"> <span class="comment">// if 为 false 不执行 </span></span><br><span class="line"> consol.<span class="title function_">log</span>(myName);</span><br><span class="line"> consol.<span class="title function_">log</span>(myName);</span><br><span class="line">  <span class="comment">// 函数出栈但是，全局变量会被保留</span></span><br><span class="line">                    </span><br><span class="line"> <span class="comment">// 案例3 let</span></span><br><span class="line"> <span class="keyword">let</span> myname=<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">//输出 张三</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> myname=<span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    consol.<span class="title function_">log</span>(myName); <span class="comment">//输出 张三</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="title function_">showName</span>()</span><br><span class="line"> <span class="comment">// // 对代码进行编译</span></span><br><span class="line"><span class="keyword">let</span> myname=<span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showName</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="comment">// 执行阶段</span></span><br><span class="line">myname=<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="title function_">showName</span>()</span><br><span class="line"><span class="comment">// 解析函数 myname 找不到申明到全局上下文中取 let 的申明在块级作用域申明了</span></span><br><span class="line">myname=<span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="comment">// 执行阶段只能在</span></span><br><span class="line"> consol.<span class="title function_">log</span>(myName);</span><br><span class="line"> consol.<span class="title function_">log</span>(myName);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>let 和const 的变量提升是到词法环境里面</p><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>返回的是一个方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例一</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> myName =<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> test1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> test2=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> innerBar =&#123;</span><br><span class="line">        <span class="attr">getName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(test1); <span class="keyword">return</span> myName &#125;,</span><br><span class="line">        <span class="attr">setName</span>:<span class="keyword">function</span>(<span class="params">newName</span>)&#123;myName =newName&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerBar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar =<span class="title function_">foo</span>();</span><br><span class="line">bar.<span class="title function_">setName</span>(<span class="string">&#x27;李四&#x27;</span>)；</span><br><span class="line">bar.<span class="title function_">getName</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="title function_">getName</span>())</span><br><span class="line"><span class="comment">// 函数上下文被删除了也会保留在闭包里 不过只能被 setNameh和getName使用</span></span><br></pre></td></tr></table></figure><p> 函数创建的变量是局部变量，局部变量，在函数执行完会自动销毁，不希望函数中的某个变量不被销毁，并且在函数外面进行操作，这里就用到了闭包形式</p><h3 id="闭包的使用"><a href="#闭包的使用" class="headerlink" title="闭包的使用"></a>闭包的使用</h3><p>使用闭包就可以解决之前的 var 的问题，模仿块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    (<span class="keyword">function</span>(<span class="params">j</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">        &#125;,<span class="number">1000</span>*i)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125; <span class="comment">// 这里的j是实参，i是 形参  实现i的值传递</span></span><br></pre></td></tr></table></figure><p>全局变量挂载在window下的，window下有一个 name 属性，最好不要声明name 变量</p><p>埋点计数器（产品分析某一些的用户数据收集）</p><p>柯里化：将多参函数变为一个单参函数</p><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>在 块级作用域的时候 使用 let const  在声明之前使用会出现报错,只创建变量，初始化不会提升 ，块作用域结束就会弹出</p><p>词法环境和调用栈类似 块里let 整体入栈 词法环境</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">let</span> b=<span class="number">22</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> b=<span class="number">33</span>;</span><br><span class="line">        <span class="keyword">var</span> c=<span class="number">44</span>;</span><br><span class="line">        <span class="keyword">let</span> d=<span class="number">55</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">lot</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>()</span><br><span class="line"><span class="comment">//编译开始</span></span><br><span class="line"><span class="title function_">fun</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="comment">// 执行阶段 开始解析函数</span></span><br><span class="line"><span class="keyword">var</span> a= <span class="literal">undefined</span>; <span class="comment">// 进入变量空间</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="literal">undefined</span> <span class="comment">//进入词法环境</span></span><br><span class="line"><span class="comment">//执行阶段</span></span><br><span class="line">a=<span class="number">11</span></span><br><span class="line">b=<span class="number">22</span>; <span class="comment">//压入词法环境的下面 同时压入代码块</span></span><br><span class="line"><span class="comment">// 代码块解析</span></span><br><span class="line"> <span class="keyword">var</span> c= <span class="literal">undefined</span>; <span class="comment">// 进入变量空间</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"> b =<span class="number">33</span>   <span class="comment">// 代码块里面的 </span></span><br><span class="line"> d =<span class="number">55</span></span><br><span class="line"> c=<span class="number">44</span>    </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//11</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//33</span></span><br><span class="line"> <span class="comment">//弹出代码块继续执行</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)  <span class="comment">//代码块外面还有b  输出22</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">//44</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(d) <span class="comment">// 报错</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例： 函数的提升</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> myName =<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> test1 =<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> myName=<span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> myName =<span class="string">&#x27;王五&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> test =<span class="number">2</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> test =<span class="number">3</span>;</span><br><span class="line">        <span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myName =<span class="string">&#x27;刘琦&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> myAge =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> test =<span class="number">1</span>;</span><br><span class="line"><span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// 代码解析</span></span><br><span class="line"><span class="keyword">var</span> myName= <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> myAge <span class="comment">// 进入词法环境</span></span><br><span class="line"><span class="keyword">let</span> test</span><br><span class="line"><span class="title function_">foo</span>() </span><br><span class="line"><span class="comment">// 执行阶段</span></span><br><span class="line">myName =<span class="string">&#x27;刘琦&#x27;</span>;</span><br><span class="line">myAge= <span class="number">10</span>;</span><br><span class="line">test =<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 开始解析函数foo 上下文 这里跳步了</span></span><br><span class="line"> myName =<span class="string">&#x27;王五&#x27;</span>;</span><br><span class="line">  test =<span class="number">2</span>;<span class="comment">//代码块外面的</span></span><br><span class="line">   test=<span class="number">3</span> <span class="comment">// 代码块的内部的</span></span><br><span class="line"><span class="comment">// 执行bar 函数 创建 bar 的上下文</span></span><br><span class="line">myName =<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">test1 =<span class="number">100</span>;</span><br><span class="line">myName=<span class="string">&#x27;李四&#x27;</span>;<span class="comment">//代码块里面</span></span><br><span class="line"><span class="comment">// 根据作用域链（看函数定义位置而不是调用位置），bar 函数上下文没有到全局上下文里面找 test 而不是 foo</span></span><br><span class="line"><span class="comment">// 打印 test =1</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>var 的创建和初始化会被提升，赋值不会</p><p>let 的创建被提升初始化和赋值会被提升，所以会造成死区</p><p>function 的创建初始化和赋值都会被提升</p><p>函数的作用域与定义位置有关于调用位置无关</p><h3 id="this-关键词的由来"><a href="#this-关键词的由来" class="headerlink" title="this 关键词的由来"></a>this 关键词的由来</h3><p>使用上下文中的属性是一个非常关键的应用，this 可以调用上下文的属性。 和作用域链不一样</p><p>全局上下文的this是指向window 对象。也就是this指向window 对象，可以访问window的属性。</p><p>函数里面的this ：要看this在哪里进行调用，在全局里面调用就是指向window，在某个对象里调用就指向某个对象</p><h3 id="this-不同场景下不同情况"><a href="#this-不同场景下不同情况" class="headerlink" title="this 不同场景下不同情况"></a>this 不同场景下不同情况</h3><p>在严格模式下 函数里面写this 指向undefined</p><p>在对象里面  调用函数是 指向对象</p><p>箭头函数 不会创建上下文，和包裹他的上下文一致，指向包裹它的对象</p><p>构造函数：构造函数指向，声明的实例对象</p><p>关于this 不被继承的问题，使用箭头函数 ，外部设置一个变量 self 来获取this 在函数内部调用</p><h3 id="call-apply-bind-的基本用法"><a href="#call-apply-bind-的基本用法" class="headerlink" title="call ,apply,bind 的基本用法"></a>call ,apply,bind 的基本用法</h3><p>第一参数是 绑定的对象，第二个参数是传递到函数的实参</p><p>call()，apply()，bind 都可以改变函数this的指向  前面两的一个是传递 零散的参数一个是传递数组 ，bind是 返回函数不会自动调用，</p><p> call 的现场用法是  将一个伪数组变为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> docm =<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(伪数组)</span><br></pre></td></tr></table></figure><p>apply 的方法 获得数组里面的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>,array)</span><br><span class="line"><span class="keyword">let</span> min =<span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="literal">null</span>,array)</span><br></pre></td></tr></table></figure><p> 实现两个数组合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">apply</span>(arr1,arr2)</span><br></pre></td></tr></table></figure><p>bind 的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add.<span class="title function_">bind</span>(bind,<span class="number">5</span>)()</span><br></pre></td></tr></table></figure><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>本代码块的 词法环境-》 代码块外的词法环境-》变量环境-》外面包裹的词法环境（看定义位置）-》变量环境</p><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>有参函数里面会用一个 arguments 的对象存储参数 这是 一个伪数组</p><h3 id="instance-of-原理"><a href="#instance-of-原理" class="headerlink" title="instance of 原理"></a>instance of 原理</h3><p>instanceof主要作用就是判断一个实例是否属于某种类型</p><p>右侧的原型是否在左侧原型链上</p><h3 id="HashMap和Array的区别"><a href="#HashMap和Array的区别" class="headerlink" title="HashMap和Array的区别"></a>HashMap和Array的区别</h3><p>1.HashMap 因为其根据hashcode计算 index所以其查找效率会随着数组长度增加而增加</p><p>2.扩容 ：初始值为16个长度，每次扩容，hash申请双倍的的数组空间  Arraymap size 》8 1.5size  4-8 申请8个  小于4申请4（频率高申请的内存更小）</p><p>3.扩容效率</p><p>HashMap 每次扩容的时候会重新计算每个成员的位置</p><h3 id="Map-和-Object"><a href="#Map-和-Object" class="headerlink" title="Map 和 Object"></a>Map 和 Object</h3><p>Object 的 键必须是一个String 和 Symbol  Map 是任意值，</p><p>Map的key 是有序的 Object 的键是无序的</p><h3 id="constructor-的理解"><a href="#constructor-的理解" class="headerlink" title="constructor 的理解"></a>constructor 的理解</h3><p>创建每个函数都有一个 prototype（原型对象）这个属性是一个指针，所有的原型对象都会自动获得 constutor （构造函数的属性）这个属性是一个指向 prototype 属性所在的函数的指针</p><h3 id="var-x2F-let-x2F-const"><a href="#var-x2F-let-x2F-const" class="headerlink" title="var&#x2F;let&#x2F;const"></a>var&#x2F;let&#x2F;const</h3><p>var —ES5 变量声明方式  没有赋值的时候 变量是undefined</p><p>let   —ES6 禁止重复声明，没有变量提升，let作用域.变量声明前使用报错</p><p>const –实际上保证的是变量的值的地址不发生 必须进行初始化</p><h3 id="Object-assgin-可以实现对象合并"><a href="#Object-assgin-可以实现对象合并" class="headerlink" title="Object .assgin  可以实现对象合并"></a>Object .assgin  可以实现对象合并</h3><p>Object.assign(target, …sources)</p><ol><li>Object.assign会将source里面的可枚举属性复制到target，如果和target的已有属性重名，则会覆盖。</li><li>后续的source会覆盖前面的source的同名属性。</li><li>Object.assign复制的是属性值，如果属性值是一个引用类型，那么复制的其实是引用地址，就会存在引用共享的问题。</li></ol><h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><p>for of 可以遍历哪些对象，只限与迭代器  Array Map S et String  ，TypeArray，arguments</p><h3 id="静态语言和动态语言"><a href="#静态语言和动态语言" class="headerlink" title="静态语言和动态语言"></a>静态语言和动态语言</h3><p>js 是动态语言</p><p>静态语言：类型检测发送在编译阶段</p><p>动态语言：只有程序运行一次才会发现错误</p><p>js 静态类型检测的方法</p><p>Flow&#x2F; TypeScript  静态检测语言</p><h3 id="异步的进化"><a href="#异步的进化" class="headerlink" title="异步的进化"></a>异步的进化</h3><p>回调-》promise-》 Generator -》async await</p><p>回调：函数嵌套会出现回调地狱，解决里异步问题</p><p>promise </p><p> Promise.prototype.then: 实例化后的Promise对象可以进行链式调用</p><p>♥ Promise.prototype.catch : 捕获异步操作时出现的异常</p><p>♥ Promise.all(): 将数组中所有的任务执行完成之后， 才执行.then 中的任务。全部为fulfilled时，它才会变成fulfilled，否则变成rejected。</p><p>♥ Promise.race(): 一旦参数内有一个值的状态发生的改变，那么该Promise的状态就是改变的状态。</p><p>♥ Promise.resolve(): 接受一个参数值，可以是普通的值，具有then()方法的对象和Promise实例.</p><p>♥ Promise.reject(): 它接收一个参数值reason，即发生异常的原因</p><p>promise 的优缺点：解决了回调地狱 ，要捕捉使用catch  存在三种状态pending（待处理），fulfilled（成功）,rejected（失败 ），promise开始就不易停止</p><p>Generator</p><p>在 function 关键字后加一个 *，那么这个函数就称之为 generator 函数</p><p>函数体有关键字 yield，后面跟每一个任务，也可以有 return 关键字，保留一个数据</p><p>通过 next 函数调用，几个调用，就是几个人任务执行</p><p>async&#x2F;await</p><p>async  await 由示例可知，使用 Async&#x2F;Await 明显节约了不少代码。我们不需要写 .then，不需要写匿名函数处理Promise 的 resolve 值，也不需要定义多余的 data 变量，还避免了嵌套代码。这些小的优点会迅速累计起来，这在之后的代码示例中会更加明显。</p><p>代码更加简洁，可以定位异常</p><p>this的定位</p><p>普通的元素绑定 指向 window，</p><p>对象中的方法  指向对象</p><p>构造器调用，this 指向返回的这个对象</p><p> 构造函数中 指向实例对象，嵌套超过一级及以上的函数，this指向的都是 window。</p><p>箭头函数 箭头函数的 this 绑定看的是 this 所在函数定义在哪个对象下，就绑定哪个对象。如果有嵌套的情况，则 this 绑定到最近的一层对象上。</p><p>基于 Function.prototype 上的 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。</p><h3 id="cookie-session-local-storage-区别"><a href="#cookie-session-local-storage-区别" class="headerlink" title="cookie session local storage 区别"></a>cookie session local storage 区别</h3><ol><li>cookie 大小为 4k 左右 ，由服务端发送写入，到了一定时间会删除 一般用于存放token信息</li><li>session 为 5m左右，存储在客户端，回话结束删除，用于是否进入页面</li><li>local storage 为5M左右 一直存在客户端里，写入就一直保存</li></ol><h3 id="cookie-session-登录机制"><a href="#cookie-session-登录机制" class="headerlink" title="cookie session 登录机制"></a>cookie session 登录机制</h3><p>cookie（客户端的状态保存机制）</p><p>用户登录验证成功后，如果是使用 Cookie 记住登录状态，则客户端会将用户名等信息放在响应头的 Set-Cookie 属性中返回给服务器，之后的 HTTP 请求都会携带这个 Cookie ，实现记住登录。</p><p>session（服务端的状态保存机制）</p><p>用户登录验证成功后，如果是 session 的话，则服务器会将用户名等信息存放在本地，再随机生成一个登录标识通过 Cookie 返回给浏览器，之后浏览器每次发送请求也会携带这个 Cookie，服务器收到后便通过这个标识得到已登录的用户信息。</p><h3 id="JS-数据类型"><a href="#JS-数据类型" class="headerlink" title="JS 数据类型"></a>JS 数据类型</h3><p>Number String Boolean BIgInt Symbol Null Undefined Object </p><p>分为基本类型和引用类型</p><p>7种基本类型：</p><p>Number Stirng Boolean BigInt Symbol （用作object 的key） Undefined–  使用typeof 会显示</p><p>两种种引用类型：</p><p>Null  Object （指针在栈，数据在堆） 使用type of显示为object 对象 的右object array等  可以通过instance of （用来 判断引用类型）</p><h3 id="闭包的理解"><a href="#闭包的理解" class="headerlink" title="闭包的理解"></a>闭包的理解</h3><p>定义 ：闭包是指有权访问另一个函数作用域中的变量的函数</p><p>闭包就是形成一个闭包函数与引用进行捆绑</p><p>保存&#x2F;保护 功能</p><p>A 函数返回一个内部的函数B  这里形成了B函数的变量背包，A函数执行介绍后这个变量背包不会删除，要访问这个变量背包就需要通过变量B 进行访问</p><p>闭包中数据不会删除，容易导致内存泄漏</p><p>闭包的引用的能够模仿块级作用域能够实现柯里化，Vue 相应式Observe 中使用闭包</p><h3 id="Promise-理解"><a href="#Promise-理解" class="headerlink" title="Promise 理解"></a>Promise 理解</h3><p>promise 可以作为一个构造函数，可以使用Promise 构造一个实例有俩个回调函数作为参数  一个是 resolve 一个是 reject</p><p>用 resolve 和 reject 可以改变 Promise 的状态  then 可以用来 指定成功或者失败 Promise  的回调函数， catch 用来捕获错误</p><p>常用的方法：</p><p> Promise.all()：返回一个新的promise对象，该promise对象在参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。 Promise.any()：接收一个Promise对象的集合，当其中的一个 promise 成功，就返回那个成功的promise的值。 Promise.race()：当参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。</p><h3 id="跨域是什么："><a href="#跨域是什么：" class="headerlink" title="跨域是什么："></a>跨域是什么：</h3><p>当请求接口和单前页面的的协议，域名，端口有一项不同，就说跨域了</p><p>浏览器的为了保证安全；跨域报警信息</p><p>跨域解决方案：cors 在后端设置 Header</p><p>使用node 、niginx 代理 设置代理服务器</p><p>Jsonp 使用 script 把回调函数拼接在Url中</p><p>使用场景一般为前后端分离开发，调用第三方接口</p><h3 id="Vuex-是什么-常用的属性"><a href="#Vuex-是什么-常用的属性" class="headerlink" title="Vuex 是什么 常用的属性"></a>Vuex 是什么 常用的属性</h3><p>用于管理项目公共数据 </p><p>Vuex 有state mutations getters actions module属性</p><p>state  用于存储公共数据，</p><p>在mutation 里规定 state 里的修改(一般不在 mutation 实现异步操作) </p><p>actions 一般使用将数据传递给mutation处理，actions 一般放一些异步操作  commit 提交数据到mutation （dispatch将数据传递进来）</p><p>module 用来分割模块</p><p>getters  用来处理 state （类似于计算属性）</p><p>mapState、mapMutations、mapAction、mapGetters一次性获取每个属性下对应的多个方法 来调用</p><h3 id="判断-类型-javaScript-的方法"><a href="#判断-类型-javaScript-的方法" class="headerlink" title="判断 类型 javaScript 的方法"></a>判断 类型 javaScript 的方法</h3><p>typeof  instanceof    Object.prototype.toStirng.call()  constructor </p><p>typeof ：用于判断基本类型  function 返回 function</p><p>instance of  ：一般使用在引用类型上 判断左侧是否在右侧的原型链上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myinstanceOf_</span>(<span class="params">left,right</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> proto =left.<span class="property">__proto__</span>;</span><br><span class="line">    <span class="keyword">let</span> prototype =rigjt.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(proto==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span>(proto==prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        proto =proto.<span class="property">__proto__</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constructor 一般用于引用类型上 用实例的构造函数是否与 之后用在最近的原型不会向上找</p><p>检测数据.constructor &#x3D;&#x3D;&#x3D;class</p><p>Object.prototype.toString.call(检测数据)：适用于所有类型的判断检测，检测方法是Object.prototype.toString.call(数据) 返回的是该数据类型的字符串。例如：【object String】要进行截取</p><h3 id="js内存空间"><a href="#js内存空间" class="headerlink" title="js内存空间"></a>js内存空间</h3><p>分为 代码空间，栈空间，堆空间</p><p>栈里面是执行函数和简单类型，栈里面放引用类型在堆里面 引用类型的 指向同一个地址会同时发生改变</p><h3 id="数据的赋值与引用类型的深拷贝和浅拷贝的内存原理"><a href="#数据的赋值与引用类型的深拷贝和浅拷贝的内存原理" class="headerlink" title="数据的赋值与引用类型的深拷贝和浅拷贝的内存原理"></a>数据的赋值与引用类型的深拷贝和浅拷贝的内存原理</h3><p>赋值：引用类型的赋值是赋值引用地址 一个变其他也会跟着变，基本数据类型会重新开辟内存，赋值后不会跟着变</p><p>浅拷贝：操作对象是引用类型，如果是对  变量的简单类型拷贝的时候是开辟空间进行赋值，对内部的应用类型复制地址（会跟着其他一起发生变化）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> userCopy =<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,user);</span><br></pre></td></tr></table></figure><p>深拷贝： 对变量里面的基本类型和引用类型都开辟空间 引用类型不会受到影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深拷贝,使用JSON</span></span><br><span class="line"><span class="keyword">var</span> userCopy= <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringfy</span>(user));</span><br></pre></td></tr></table></figure><p>开发中使用的方法 使用lodash</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> _ =<span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj2=_.<span class="title function_">clone</span>(obj1);</span><br><span class="line"><span class="comment">// 使用展开运算符进行浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj2 =&#123;...obj1&#125;</span><br><span class="line"><span class="comment">// 数组的浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> arr2=arr.<span class="title function_">concat</span>();</span><br><span class="line"><span class="keyword">let</span> arr2=arr.<span class="title function_">slice</span>();</span><br></pre></td></tr></table></figure><p>使用深拷贝</p><p>深克隆的思路：变量对象，直到数组里面都是基本数据类型，然后去进行复制，就是深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进行深拷贝</span></span><br><span class="line"><span class="keyword">var</span> _=<span class="built_in">require</span>(<span class="string">&#x27;lodsh&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj2=_.<span class="title function_">cloneDeep</span>(obj1);</span><br></pre></td></tr></table></figure><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>c 语言是手动垃圾回收，JavaScript 、java是自动的垃圾回收 释放内存里的数据</p><p>栈里面的垃圾回收机制是 函数执行完弹出，删除上下文变量</p><p> 栈垃圾回收的方式非常简便，当一个函数执行结束之后，JavaScript 引擎会通过向下移动 ESP 来销毁该函数保存在栈中的执行上下文，遵循先进后出的原则。 堆垃圾回收，当函数直接结束，栈空间处理完成了，但是堆空间的数据虽然没有被引用，但是还是存储在堆空间中，需要垃圾回收器将堆空间中的垃圾数据回收。为了使垃圾回收达到更好的效果，根据对象的生命周期不一样，使用不同的垃圾回收的算法</p><p>堆里面的垃圾回收机制： 分为新生区与老生区 。具体的流程包括 ：</p><p> 标记，标记为活动对象和非活动对象，活动对象就是还在使用的对象。</p><p>回收，回收非活动对象所占有的内存。其实就是在标记完成之后统一回收。</p><p>内存整理，一般来说回收对象后，内存会存在大量的不连续空间</p><p>新生区特点：通常把小的对象分配到新生区，新生区的回收比较频繁，1-8M（分为新生区和空闲区）</p><p>副垃圾回收,负责新生代的垃圾回收； 主垃圾回收，负责老生代的垃圾回收</p><p>新生区垃圾回收机制：</p><p>使用 Scanvage算法，采用复制机制 处理内部的空闲区和对象区，经过两次垃圾回收机制还存活的对象，会移动到对象晋升机制，到老生区</p><p> scanvage 的机制： 存活的对象从对象区复制到空闲区，清空对象区，这个时候对象区变为空闲区，重复上述操作</p><p>老生区的垃圾回收： 标记清除 -标记整理</p><h3 id="全停顿"><a href="#全停顿" class="headerlink" title="全停顿"></a>全停顿</h3><p>V8 是使用副垃圾回收器处理垃圾回收的，不过由于js是运行在主线程之上，进行垃圾回收的时候js脚本会停下来</p><p>使用增量标记算法，将垃圾回收的过程中的标记分为若干小步骤放在js 执行过程中，统一进行清理整理</p><h3 id="V-model-的实现原理"><a href="#V-model-的实现原理" class="headerlink" title="V-model 的实现原理"></a>V-model 的实现原理</h3><p>v-model 是一个语法糖</p><p>1.v-bind ：绑定响应式</p><ol start="2"><li>oninput 事件触发</li></ol><h3 id="解构运算符的使用"><a href="#解构运算符的使用" class="headerlink" title="解构运算符的使用"></a>解构运算符的使用</h3><p>解构运算符左右的形式基本一致,如果右侧赋值缺失就会赋值undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速的进行赋值 </span></span><br><span class="line"><span class="keyword">let</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] ;</span><br><span class="line"><span class="comment">// 对象的快速赋值</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123; <span class="attr">p</span>:[<span class="string">&#x27;hello&#x27;</span>,&#123;<span class="attr">y</span>:<span class="string">&#x27;world&#x27;</span>&#125;]&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>:[x,&#123;&#125;]&#125;=obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"><span class="comment">// 变量的快速交换</span></span><br><span class="line">[a,b]=[b,a]</span><br></pre></td></tr></table></figure><h3 id="剩余运算符"><a href="#剩余运算符" class="headerlink" title="剩余运算符"></a>剩余运算符</h3><p>会将后面的参数一一赋值  …</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a,b,...rest&#125;=&#123;<span class="attr">a</span>:<span class="number">10</span>,<span class="attr">b</span>:<span class="number">20</span>,<span class="attr">c</span>:<span class="number">30</span>,<span class="attr">d</span>:<span class="number">40</span>&#125;;</span><br></pre></td></tr></table></figure><p>浅克隆和合并</p><p>let obj3 &#x3D;{…obj1,…obj2}    let arr1&#x3D;[…arr1,…arr2]</p><h3 id="如何修改elementUI的文件样式"><a href="#如何修改elementUI的文件样式" class="headerlink" title="如何修改elementUI的文件样式"></a>如何修改elementUI的文件样式</h3><p>第一种全局引入css文件的方式，适合于对elementUI整体的修改，比如整体配色的修改；<br>第二种添加一个style标签的形式，也能够实现修改默认样式的效果，但实际上因为是修改了全局的样式，因此 在不同的vue组件中修改同一个样式有可能会有冲突。<br>第三种方式通过 &#x2F;deep&#x2F; 的方式可以很方便的在vue组件中修改默认样式，也不会于其他页面有冲突。<br>第四种方式局限性比较大，可以使用，但不推荐使用。</p><h3 id="Vue3-双向绑定的方法"><a href="#Vue3-双向绑定的方法" class="headerlink" title="Vue3 双向绑定的方法"></a>Vue3 双向绑定的方法</h3><p>vue3 实现双向是通过proxy 实现的</p><p><strong>Proxy</strong>是 ES6 中新增的一个特性，翻译过来意思是”代理”，用在这里表示由它来“代理”某些操作。 Proxy 让我们能够以简洁易懂的方式控制外部对对象的访问。其功能非常类似于设计模式中的代理模式。</p><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><p>用来判断是否进行路由的跳转，路由跳转的钩子函数</p><p>1.全局前置守卫  router.beforeEach()</p><p>2 全局后置守卫 router.afterEach</p><p>3 路由独享守卫 写在路由内部的守卫  beforeEnter</p><p>4 写在组件内部的守卫 beforeRouterEnter 、beforeRouterUpdate、beforeRouteleave</p><h3 id="Vue-router-实现懒加载"><a href="#Vue-router-实现懒加载" class="headerlink" title="Vue-router 实现懒加载"></a>Vue-router 实现懒加载</h3><p>结合 Vue 的<a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">异步组件</a>和 Webpack 的<a href="https://doc.webpack-china.org/guides/code-splitting-async/#require-ensure-/">代码分割功能</a>，可以实现路由组件的懒加载</p><p>在路由申明组件的时候 ，直接将 import 回调写在里面</p><h3 id="js是如何监听-HistoryRouter-的变化"><a href="#js是如何监听-HistoryRouter-的变化" class="headerlink" title="js是如何监听 HistoryRouter 的变化"></a>js是如何监听 HistoryRouter 的变化</h3><p>通过 hash 变化，利用window.onhashchange 监听</p><p>通过 historyRouter ：首先完成一个订阅-发布模式，然后重写history.pushState, history.replaceState,并添加消息通知，这样一来只要history的无法实现监听函数就被我们加上了事件通知，只不过这里用的不是浏览器原生事件，而是通过我们创建的event-bus 来实现通知，然后触发事件订阅函数的执行。</p><h3 id="Vue2-双向绑定"><a href="#Vue2-双向绑定" class="headerlink" title="Vue2 双向绑定"></a>Vue2 双向绑定</h3><p>vue2采用的是 数据劫持结合发布者-订阅者的方式来实现 数据响应式</p><p>通过原生js提供监听数据的API 当数据发生变化在回调修改 dom 核心API，在回调函数中修改dom 核心API</p><p>Object.defineProperty Object.defineProperty API的使用 setter getter 来劫持数据在数据变动时 发布消息给订阅者</p><p>Object.defineProperty的缺点 1. 一次性递归到底开销很大，如果数据很大，大量的递归导致调用栈溢出 2. 不能监听对象的新增属性和删除属性 3. 无法正确的监听数组的方法，当监听的下标对应的数据发生改变时</p><h3 id="数组去重的方法"><a href="#数组去重的方法" class="headerlink" title="数组去重的方法"></a>数组去重的方法</h3><p>1，利用对象属性key排除重复项：遍历数组，每次判断对象中是否存在该属性，不存在就存储在新数组中，并且把数组元素作为key，设置一个值，存储在对象中，最后返回新数组。这个方法的优点是效率较高，缺点是占用了较多空间，使用的额外空间有一个查询对象和一个新的数组 </p><p>2，第二种方法：利用Set类型数据无重复项：new 一个 Set，参数为需要去重的数组，Set 会自动删除重复的元素，再将 Set 转为数组返回</p><p>3，：filter+indexof 去重：这个方法和第一种方法类似，利用 Array 自带的 filter 方法，返回 arr.indexOf(num) 等于 index 的num。原理就是 indexOf 会返回最先找到的数字的索引，假设数组是 [1, 1]，在对第二个1使用 indexOf 方法时，返回的是第一个1的索引0。这个方法的优点是可以在去重的时候插入对元素的操作，可拓展性强。</p><p>第四种方法：这个方法比较巧妙，从头遍历数组，如果元素在前面出现过，则将当前元素挪到最后面，继续遍历，直到遍历完所有元素，之后将那些被挪到后面的元素抛弃。这个方法因为是直接操作数组，占用内存较少。 </p><p>第五种方法：reduce +includes去重：这个方法就是利用reduce遍历和传入一个空数组作为去重后的新数组，然后内部判断新数组中是否存在当前遍历的元素，不存在就插入到新数组中。</p><p>这种方法时间消耗多，内存空间也有额外占用。 方法还有很多，常用的、了解的这些就可以 加分回答 以上五个方法中，在数据低于10000条的时候没有明显的差别，高于10000条，第一种和第二种的时间消耗最少，后面三种时间消耗依次增加，由于第一种内存空间消耗比较多，且现在很多项目不再考虑低版本浏览器的兼容性问题，所以建议使用第二种去重方法，简洁方便。</p><p> arr1 &#x3D; [1, 1, 2, 3, 4, 3, 1] </p><p>let set1 &#x3D; new Set(arr1) 返回的是一个类数组</p><p>就是类似于数组但是实际上原型是Object console.log(set1) </p><p>Set(4) {1, 2, 3, 4} 可以利用Array.from来将他转成真正的数组</p><p> let newArr &#x3D; Array.from(set1) </p><p>console.log(newArr)  此时他就是一个去重完毕的数组</p><h3 id="浮动的使用"><a href="#浮动的使用" class="headerlink" title="浮动的使用"></a>浮动的使用</h3><p>1.脱离标准文档流不仅可以设置宽高也可以按照浮动设置布局，父盒子没有设置高度会被盒子撑开。清除浮动： overflow：hidden  添加伪元素 ,添加空元素</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>不能使用 没有 this new 没有 arguments 没有原型 和 super 箭头函数相当于匿名函数 要从外部获取 this的指向</p><p>-简单的函数表达式，内部没有this引用，没有递归、事件绑定、解绑定，适用于map、filter等方法中</p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>变量提升是指JS的变量和函数声明会在代码编译期，提升到代码的最前面。</p><p>提升了声明没有提升变量赋值，函数声明优先提升 如果在初始化之前访问变量会得到undefined</p><p>使用let和const声明的变量是创建提升，形成暂时性死区，在初始化之前访问let和const创建的变量会报错。</p><h3 id="前端路由-HashRouter-和-HistoryRouter"><a href="#前端路由-HashRouter-和-HistoryRouter" class="headerlink" title="前端路由 HashRouter 和 HistoryRouter"></a>前端路由 HashRouter 和 HistoryRouter</h3><p>1.history 是使用浏览历史记录栈的API 实现，hash 是通过  监听location 对象hash值  </p><p>2.history 是没有# 的 hash 是有# 的</p><p>3.同一url history 会重复进栈，hash 不会 </p><p>4 hashRouter 的原理是通过 window.onhashchage 方法获取新的URL   history 是监听浏览器的的进退</p><ol start="5"><li>hash 兼容性好一些  history 的url 更加简洁</li></ol><h3 id="map-和-forEach-的区别"><a href="#map-和-forEach-的区别" class="headerlink" title="map 和 forEach 的区别"></a>map 和 forEach 的区别</h3><p>得分点map 创建新的数组：</p><p>1 map 返回处理后的值 return出来一个length和原数组一致的数组 forEach  返回 undefined  forEach改变原来的数组</p><p>map 不会改变原来是数组</p><p>2.map速度更快，方便链式调用其他方法</p><h3 id="事件循环-Event-loop-宏任务与-微任务"><a href="#事件循环-Event-loop-宏任务与-微任务" class="headerlink" title="事件循环 Event loop  宏任务与 微任务"></a>事件循环 Event loop  宏任务与 微任务</h3><p>js 代码执行的时候 执行js代码的时候，遇见同步任务，直接推入调用栈中执行， 遇到异步任务挂起，同步任务栈中的任务执行完之后才会 开始调用异步任务，宏任务：任务队列中的任务称为宏任务，每个宏任务都包含一个微任务队列。</p><p>微任务队列: 宏任务队列完成后不会急着去执行下一个宏任务</p><p>常见的宏任务：setTimeout&#x2F;setInterval 、ajax 请求  setImmediate I&#x2F;O 等</p><p>微任务： observer  nextTick</p><h3 id="Diff-算法"><a href="#Diff-算法" class="headerlink" title="Diff 算法"></a>Diff 算法</h3><ol><li><p>虚拟dom 是一个的对象， 位于数据和 真实都没中间</p></li><li><p><strong>Diff算法是一种对比算法</strong>。对比两者是<code>旧虚拟DOM和新虚拟DOM</code>，对比出是哪个<code>虚拟节点</code>更改了，找出这个<code>虚拟节点</code>，并只更新这个虚拟节点所对应的<code>真实节点</code>，而不用更新其他数据没发生改变的节点，实现<code>精准</code>地更新真实DOM，进而<code>提高效率</code>。</p><p><code>使用虚拟DOM算法的损耗计算</code>： 总损耗 &#x3D; 虚拟DOM增删改+（与Diff算法效率有关）真实DOM差异增删改+（较少的节点）排版与重绘</p><p><code>直接操作真实DOM的损耗计算</code>： 总损耗 &#x3D; 真实DOM完全增删改+（可能较多的节点）排版与重绘</p><p>3.是一种深度优先算法 只会进行同级比较</p><h3 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep -alive"></a>keep -alive</h3><p>keep-alive  缓存组件提升性能 （对于经常变化的内容较多的组件）</p></li></ol><p>1 <keep-alive>&#96;标签包裹的组件都会进行缓存，区分被包裹的组件是否缓存有两种方法，第一种是给keepalive 添加属性，组件名称指的是具体组件添加的name，不是路由里面的name。</keep-alive></p><p>2 第二种也是最常用的一种是，和路由配合使用：在路由中添加meta属性</p><p>nclude 包含的组件(可以为字符串，数组，以及正则表达式,只有匹配的组件会被缓存)。exclude 排除的组件</p><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>得分点 CSRF时跨站请求伪造、盗用用户身份发起请求 标准回答 CSRF跨站点请求伪造（Cross Site Request Forgery）和XSS攻击一样，有巨大的危害性，就是攻击者盗用了用户的身份，以用户的身份发送恶意请求，但是对服务器来说这个请求是合理的，这样就完成了攻击者的目标。</p><p>1 验证码 2 请求头里面的 token信息</p><h3 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h3><p>所以将跨站脚本攻击写为XSS。攻击者可以通过向Web页面里面插入script代码，当用户浏览这个页面时，就会运行被插入的script代码，达到攻击者的目的。XSS的危害一般是泄露用户的登录信息cookie，攻击者可以通过cookie绕过登录步骤直接进入站点。XSS的分类分为反射型和存储型。反射型就是临时通过url访问网站，网站服务端将恶意代码从url中取出，拼接在HTML中返回给浏览器，用户就会执行恶意代码。存储型就是将恶意代码以留言的形式保存在服务器数据库，任何访问网站的人都会受到攻击。</p><p>预防XSS攻击的方案基本是对数据进行严格的输出编码，比如HTML元素的编码，JavaScript编码，css编码，url编码等等。 加分回答 XSS的危害： - 获取cookie：网站中的登录一般都是用cookie作为某个用户的身份证明，这是服务器端返回的一串字符。如果cookie被攻击者拿到，那么就可以绕过密码登录。当空间、论坛如果可以被插入script代码，那么进入空间或者论坛的人的账号就可以轻易被攻击者获取。恶意跳转</p><h3 id="js-继承"><a href="#js-继承" class="headerlink" title="js 继承"></a>js 继承</h3><p>1 原型链继承方法： A 函数作为父函数 （A 的构造函数） B函数作为子函数（B的构造函数）  A的 一个实例对象是 B函数的原型  B函数的实例就就可以继承A 函数的属性 ，容易理解 ,子类实例无法传递传递参数</p><p>2.构造函数的继承：A 函数作为父函数 （A 的构造函数） B函数作为子函数（B的构造函数）   在B 构造函数里面会进行放入A .call(this);</p><p>3.组合继承  </p><p>4.原型式继承</p><p>5.寄生继承</p><h3 id="伪数组和数组"><a href="#伪数组和数组" class="headerlink" title="伪数组和数组"></a>伪数组和数组</h3><p> 伪数组是 Object 类型 ，伪数组它的类型不是Array，而是Object，而数组类型是Array。</p><p>可以使用的length属性查看长度，也可以使用[index]获取某个元素，但是不能使用数组的其他方法，也不能改变长度，遍历使用for in方法。</p><p>arguments  获取的批量Dom就是  Array.from 进行转化 [].slice.call(伪数组)</p><h3 id="defer-与async-的区别"><a href="#defer-与async-的区别" class="headerlink" title="defer 与async 的区别"></a>defer 与async 的区别</h3><p>当页面加载到scrpt 元素时就要会进行加载，加上async属性，加载JS文档和渲染文档可以同时进行（异步），当JS加载完成，JS代码立即执行，会阻塞HTML渲染。 加上 defer 后，当html 渲染完成后才会执行js 代码 ,阻塞的原因 js 会操作dom 因此会页面渲染产生冲突。因此javascript 引擎与 渲染引擎是互斥的，gui线程会等待 js 的执行，执行时间过长就会出现阻塞。</p><h3 id="浏览器是如何进行渲染的"><a href="#浏览器是如何进行渲染的" class="headerlink" title="浏览器是如何进行渲染的"></a>浏览器是如何进行渲染的</h3><p>拿到HTML之后将 HTML转化为 dom 树 —&gt;将 css 样式转化为 stylesheet –&gt;将 dom stylesheet 转化为布局树-&gt;布局树进行分层-&gt; 图层变图块-&gt;光栅化变为位图-&gt; 绘制出来，分图层是为了避免同时绘制整个页面 ，光栅化可以解决非视线区的资源浪费。</p><h3 id="vue-中的-computed-和-watch-的区别"><a href="#vue-中的-computed-和-watch-的区别" class="headerlink" title="vue  中的 computed  和 watch 的区别"></a>vue  中的 computed  和 watch 的区别</h3><p>computed  计算属性，值有缓存触发条件是依赖的属性值发生改变才会变化（需要依赖其他值的时候使用）</p><p>watch 无缓存可以进行异步操作，类似于监听回调（频繁变化，异步场景下使用）</p><h3 id="vue-的-nextTick-作用和原理"><a href="#vue-的-nextTick-作用和原理" class="headerlink" title="vue 的 $ nextTick 作用和原理"></a>vue 的 $ nextTick 作用和原理</h3><p> Vue 在更新 DOM 时是异步执行的，在修改数据后，视图不会立刻更新，而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。所以修改完数据，立即在方法中获取DOM，获取的仍然是未修改的DOM。 </p><p> $ nextTick  该方法中的代码会在当前渲染完成后执行，就解决了异步渲染获取不到更新后DOM的问题了</p><p>原理的：$nextTick 本质是返回 一个Promise  ，（获取dom）应用场景在钩子函数created()里面想要获取操作Dom，把操作DOM的方法放在$nextTick中</p><h3 id="Weakmap-和-map"><a href="#Weakmap-和-map" class="headerlink" title="Weakmap 和 map"></a>Weakmap 和 map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map =<span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">var</span> o= &#123;<span class="attr">num</span>:<span class="number">1</span>&#125;;</span><br><span class="line">map.<span class="title function_">set</span>(o,<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map);</span><br></pre></td></tr></table></figure><p>map的键和值可以是任何数据类型，map 可以使用for of 的形式进行迭代，map是有顺序的obj会进行自动排序，map多用于修改频繁的数据</p><p>weakmap 只能使用对象作为键名,不能迭代，当键名的所指向的对象被垃圾回收了，键名是无效的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> weakmap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">weakmap.<span class="title function_">set</span>(obj,<span class="number">111</span>)</span><br></pre></td></tr></table></figure><h3 id="new-之后会发生什么"><a href="#new-之后会发生什么" class="headerlink" title="new 之后会发生什么"></a>new 之后会发生什么</h3><p>得分点，1.创建一个空对象2， 实例的__proto__ 绑定到构造函数的原型对象上3,将步骤的对象作为this 的 上下文 （构造函数不能为箭头函数）</p><h3 id="token能放在cookie-里面吗"><a href="#token能放在cookie-里面吗" class="headerlink" title="token能放在cookie 里面吗"></a>token能放在cookie 里面吗</h3><p>可以， token 一般是来判断用户是否登录 一般包含uid、time（时间戳）、sign（签名） 不设置过期时间就行，客户端使用用户名跟密码请求登录 2. 服务端收到请求，去验证用户名与密码 3. 验证成功后，服务端签发一个 token ，并把它发送给客户端 4. 客户端接收 token 以后会把它存储起来，比如放在 cookie 里或者 localStorage 里 5.客户端每次发送请求时都需要带着服务端签发的 token</p><h3 id="iframe-有什么优点和缺点"><a href="#iframe-有什么优点和缺点" class="headerlink" title="iframe 有什么优点和缺点"></a>iframe 有什么优点和缺点</h3><p>1.iframe 可以原封不动的将嵌入的网页展示出来。</p><p>2.如果有多个网页引用 iframe可以快速实现调用页面的更改</p><p>3.网页如果为了同一风格，用iframe 可以提高复用</p><p>4.可以解决加载缓慢的第三方 内容</p><p>缺点： 1.iframe 会阻塞 主页面的 onload 事件</p><p>2.会影响页面的并行加载</p><p>3.框架结构迷惑</p><p>4代码复杂，不利于SEO</p><p>5兼容性较差，增加 http 不适合大型网站</p><h3 id="vue-生命周期中的-create-建立异步"><a href="#vue-生命周期中的-create-建立异步" class="headerlink" title="vue 生命周期中的 create 建立异步"></a>vue 生命周期中的 create 建立异步</h3><p>最常用 的是在 created 里面调用异步请求</p><p>因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是<strong>最常用的是在 created 钩子函数中调用异步请求</strong>，因为在 created 钩子函数中调用异步请求有两个优点：<br>第一点：能更快获取到服务端数据，减少页面 loading 时间；<br>第二点：放在 created 中有助于一致性，因为ssr 不支持 beforeMount 、mounted 钩子函数。</p><h3 id="Keep-alive"><a href="#Keep-alive" class="headerlink" title="Keep-alive"></a>Keep-alive</h3><p>用于组件缓存，使用<keep-alive></keep-alive> 标签包裹组件 ，可以缓存组件，多用于切换频繁的组件</p><h3 id="vue-首页白屏如何解决"><a href="#vue-首页白屏如何解决" class="headerlink" title="vue 首页白屏如何解决"></a>vue 首页白屏如何解决</h3><ol><li>路由懒加载</li><li>vue-cli开启打包压缩 和后台配合 gzip访问</li><li>进行cdn加速</li><li>开启vue服务渲染模式</li><li>用webpack的externals属性把不需要打包的库文件分离出去，减少打包后文件的大小</li><li>在生产环境中删除掉不必要的console.lo</li></ol><h3 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h3><p>beforeCreate( 创建前 )</p><p>created ( 创建后 ）</p><p>beforeMount（挂载开始之前被调用）</p><p>mounted（挂载完成）</p><p>beforeUpdate（数据更新之前被调用）</p><p>updated(数据更改导致的虚拟 DOM 重新渲染和打补丁之后调用)</p><p>beforeDestroy（我们将要销毁整个页面或实例时调用）</p><p>destroyed（我们的整个页面或实例被销毁之后调用）</p><p>activated（被 keep-alive 缓存的组件激活时调用）</p><p>deactivated（子可以看做是beforeDestory和destoryed的替）</p><p><strong>什么是MVVM？</strong></p><p><code>视图模型双向绑定</code>，是<code>Model-View-ViewModel</code>的缩写，也就是把<code>MVC</code>中的<code>Controller</code>演变成<code>ViewModel。Model</code>层代表数据模型，<code>View</code>代表UI组件，<code>ViewModel</code>是<code>View</code>和<code>Model</code>层的桥梁，数据会绑定到<code>viewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>viewModel</code>层更新数据。以前是操作DOM结构更新视图，现在是<code>数据驱动视图</code>。</p><p><strong>MVVM的优点：</strong></p><p>1.<code>低耦合</code>。视图（View）可以独立于Model变化和修改，一个Model可以绑定到不同的View上，当View变化的时候Model可以不变化，当Model变化的时候View也可以不变；<br> 2.<code>可重用性</code>。你可以把一些视图逻辑放在一个Model里面，让很多View重用这段视图逻辑。<br> 3.<code>独立开发</code>。开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计。<br> 4.<code>可测试</code>。</p><h3 id="root-refs-和-parent-的使用"><a href="#root-refs-和-parent-的使用" class="headerlink" title="$ root  $ refs 和 $parent 的使用"></a>$ root  $ refs 和 $parent 的使用</h3><p>用来获取 vue 的根实例 可以理解为vuex</p><p>$ refs  在子组件上标记 ref特效后，this可以直接访问该组件 可以代替 emit 和 on的作用</p><p>$parent 属性可以用于子组件访问父组件实例</p><h3 id="路由跳转和location-href的区别"><a href="#路由跳转和location-href的区别" class="headerlink" title="路由跳转和location.href的区别"></a>路由跳转和location.href的区别</h3><p>使用使用location.href&#x3D;’&#x2F;url’来跳转，简单方便，但是刷新了页面，</p><p>路由跳转是静态跳转，无页面刷新</p><h3 id="Vue-响应式原理"><a href="#Vue-响应式原理" class="headerlink" title="Vue 响应式原理"></a>Vue 响应式原理</h3><h3 id="Vue-组件化"><a href="#Vue-组件化" class="headerlink" title="Vue 组件化"></a>Vue 组件化</h3><p>1.执行init 操作  使用 object.defineProperty  将属性进行数据劫持 ,数组是通过重写数组实现，多层是通过递归</p><p>2.进行渲染的时候会读取Vue实例中和视图相关的响应数据，使用getter 进行依赖收集，通过数据劫持和观察者模式就实现了一个MVVM模式 的blinder</p><p>3.当数据方式变化或者就触发 setter 之后通知dep 和watcher 告知要进行重新渲染 watcher再进行update</p><h3 id="协商缓存和强缓存及其应用场景"><a href="#协商缓存和强缓存及其应用场景" class="headerlink" title="协商缓存和强缓存及其应用场景"></a>协商缓存和强缓存及其应用场景</h3><p>web 缓存描述是（相当于 浏览器中存储网页数据文件的文件夹）。</p><ul><li><p>缓存减少了冗余的数据传输，节省了你的网络费用。</p></li><li><p>缓存缓解了网络瓶颈的问题。不需要更多的带宽就能够更快地加载页面。</p></li><li><p>缓存降低了对原始服务器的要求。服务器可以更快地响应，避免过载的出现。</p></li><li><p>缓存降低了距离时延，因为从较远的地方加载页面会更慢一些。</p><p>缺点：缓存中的数据和原始服务中的数据不一致，消耗内存</p><p>缓存可以分为强缓存和协商缓存</p><p>强制缓存：强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。（是浏览器自己验证是否使用缓存）</p><p>协商缓存： 询问服务是否使用缓存</p><p>当客户端去请求资源的时候，服务端会对返回的文件进行强制配置cache-control，并且设置资源过期时间等</p><p>协商缓存是客户端与服务端经过协商对资源的的配置 ，客户端会发送Etag 给服务端，验证是否需要资源过期是否需要从新请求。</p><p>资源没有过期 不需要再次请求返回 304</p><p>过期了重新请求资源 返回200</p></li></ul><h3 id="如果没有Last-Modified会怎样"><a href="#如果没有Last-Modified会怎样" class="headerlink" title="如果没有Last Modified会怎样"></a>如果没有Last Modified会怎样</h3><p>last-modified 是资源最后修改的时间  Etag 是资源的唯一标识 确实标识无法判断缓存的资源是否过期</p><h3 id="项目中登录注册具体的实现"><a href="#项目中登录注册具体的实现" class="headerlink" title="项目中登录注册具体的实现"></a>项目中登录注册具体的实现</h3><ol><li>客户端（即浏览器）向服务端发起request请求</li><li>服务端通过监听80端口（http）或443端口（https）来接收请求</li><li>服务端接收请求后进行相关处理</li><li>服务端向客户端发response响应。</li><li>客户端接收response响应，完成一次交互。</li></ol><h3 id="nextTick-的使用场景和原理"><a href="#nextTick-的使用场景和原理" class="headerlink" title="$nextTick 的使用场景和原理"></a>$nextTick 的使用场景和原理</h3><p>一般是数据发生改变获得更新后的dom ，<code>callbacks</code>也就是异步操作队列 <code>callbacks</code>新增回调函数后又执行了<code>timerFunc</code>函数，<code>pending</code>是用来标识同一个时间只能执行一次</p><h3 id="Vue-底层实现原理"><a href="#Vue-底层实现原理" class="headerlink" title="Vue 底层实现原理"></a>Vue 底层实现原理</h3><p>observer（数据监听器）：</p><p>Vue.js 采用 数据劫持和发布订阅模式 Object.defineProprtty() 来监听数据的变化，这个函数可以定义 setter 和 getter，每当数据发生变化 就会触发 setter。这个时候 Observer 就要通知订阅者</p><p>Watcher（订阅者）</p><ol><li><p>在自身实例化时往属性订阅器(dep)里面添加自己</p></li><li><p>自身必须有一个update()方法</p></li><li><p>待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调</p><p>complie（指令解析器）</p><p> Compile主要做的事情是解析模板指令，将模板中变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，一旦数据有变动，收到通知，更新试图</p></li></ol><h3 id="Vue-Router-原理哪个不会请求服务器"><a href="#Vue-Router-原理哪个不会请求服务器" class="headerlink" title="Vue Router 原理哪个不会请求服务器"></a>Vue Router 原理哪个不会请求服务器</h3><p>url的hash，就是通常所说的锚点#，javascript通过hashChange事件来监听url的变化，IE7以下需要轮询。比如这个 URL：<a href="http://www.abc.com/#/hello%EF%BC%8Chash">http://www.abc.com/#/hello，hash</a> 的值为#&#x2F;hello。它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此<strong>改变 hash 不会重新加载页</strong></p><p>HTML5的History模式，它使url看起来像普通网站那样，以“&#x2F;”分割，没有#，单页面并没有跳转。不过使用这种模式需要服务端支持，服务端在接收到所有请求后，都只响应同一个html文件，不然会出现404。因此单页面应用只有一个html，整个网站的内容都在这一个html里，通过js来处理。</p><p>Vue router 的两种方法，hash模式不会请求服务器</p><h3 id="Vue-的组件通讯"><a href="#Vue-的组件通讯" class="headerlink" title="Vue 的组件通讯"></a>Vue 的组件通讯</h3><p>1.父子间通讯:props   refs   v-model（父传子）   $emit()&#x2F;on   </p><p>2.兄弟组件之间  bus  emit on  订阅发布</p><p>3.祖孙之间使用  inject provide，attr ，listener</p><ol start="4"><li><p>万能：vuex pinia</p><p>v-show 与 v-if 的区别 与共同点： 都是控制元素隐藏和显示的指令  v-show （true&#x2F;false 都会渲染）是使用 dipaly：none来控制隐藏 v-if 会 操作dom 的添加和删除  v-show 适合频繁操作</p><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>标准盒模型与怪异盒模型  content box （标准）width 和 height 设置content 的大小，整个盒子还要加上 padding 和border，怪异盒模型 border-box  给盒子设置 width 和 height 设置是整个盒子的大小</p><h3 id="如何实现-过期的-localstorage-数据"><a href="#如何实现-过期的-localstorage-数据" class="headerlink" title="如何实现 过期的 localstorage 数据"></a>如何实现 过期的 localstorage 数据</h3><p>惰性删除： 不会立刻删除，等到下次要用时，检测到过期进行删除（存入单前时间或存储时间）</p><p>定时删除：每隔一段时间就删除 localstorage中的数据</p><p>（token 的删除可以按照上述方法进行）</p><h3 id="Vue-列表-为什么要加key"><a href="#Vue-列表-为什么要加key" class="headerlink" title="Vue 列表 为什么要加key"></a>Vue 列表 为什么要加key</h3><p>vue 是虚拟dom diff 算法比对时会堆遍历对象重复渲染 ，有了key创建新对象插入即可，优化性能</p><h3 id="vue-router-实现懒加载"><a href="#vue-router-实现懒加载" class="headerlink" title="vue-router 实现懒加载"></a>vue-router 实现懒加载</h3><p>用到的组件才会进行加载，不用不会进行加载</p><p>import 组件的步骤放在 声明component  的回调函数中</p><h3 id="Vue-的钩子函数"><a href="#Vue-的钩子函数" class="headerlink" title="Vue 的钩子函数"></a>Vue 的钩子函数</h3><p>钩子函数分为以下几个阶段</p><p>挂载阶段&#x3D;&gt;更新阶段&#x3D;&gt;销毁阶段</p><p>挂载阶段 ：</p><p> beforeCreate 创建实例之前  </p><p> created 实例创建完成 实例创建完成（执行new Vue(options)），可访问data、computed、watch、methods上的方法和数据，可进行数据请求，未挂载到DOM结构上，不能获取el属性，如果要进行dom操作，那就要用nextTick函数</p><p>beforeMount：页面初始化，在挂载之前调用 找到template，并且编译成 render</p><p>mounted：实例挂载到DOM上，此时可以通过DOM API获取到DOM节点，$ref属性可以访问常用于获取VNode信息和操作，ajax请求</p><p>更新阶段</p><p>beforeupdate：响应式数据更新调用是用于更新之前访问现有的dom</p><p>updateed：虚拟DOM重新渲染和打补丁的之后的操作</p><p>销毁阶段</p><p>beforeDestroy：实例销毁之前，实例仍然可用</p><p>destroy：实例销毁之后</p><p>父子创建和销毁是 对称的</p><p>父亲created&gt; 子created &gt; 子mounted&gt; 父亲mounted&gt; 更新：父亲beforeUpdate &gt; 子beforeUpdated &gt; 子updated &gt; 父亲updated 销毁：父亲beforeDestroy&gt; 子beforeDestroy &gt; 子destroyed&gt; 父destroyed</p><h3 id="前端性能优化的手段："><a href="#前端性能优化的手段：" class="headerlink" title="前端性能优化的手段："></a>前端性能优化的手段：</h3><p>1.文件加载块 ： 压缩图片，精灵图，节流防抖</p><p>2.减少渲染： http 缓存  keep-alive 组件缓存，懒加载组件和图片，减少重排</p><p>js 放在底部，css 放head</p><h3 id="性能优化的指标"><a href="#性能优化的指标" class="headerlink" title="性能优化的指标"></a>性能优化的指标</h3><p>(页面加载时间，页面绘制时间)</p><p>1、FP首屏绘制：页面开始展示的时间点-开始请求的时间点；2、FCP：首屏内容绘制；3、TTI可交互时间：domContentLoadedEventEnd - navigationStart；4、最大内容绘制LCP：可用通过PerformanceObserver来捕获；5、首次有效绘制FMP：捕获首次渲染的加载性能。 得到评估的方法： Chrome Performance选项卡 &#x2F; Lighthouse 生成性能检测报告；浏览器的开发者模式</p></li></ol><h2 id="网络-与计算机基础"><a href="#网络-与计算机基础" class="headerlink" title="网络 与计算机基础"></a>网络 与计算机基础</h2><h3 id="进程，线程，协程"><a href="#进程，线程，协程" class="headerlink" title="进程，线程，协程"></a>进程，线程，协程</h3><p>进程，是操作系统进行资源分配和调度的一个独立单位 </p><p>线程 ，是程序执行中一个 程序执行的最小单元</p><p>协层，基于线程之上，程序员设计的轻量级线程</p><p>进程和线程的 区别：</p><p>线程作为调度和分配的基本单位，进程作为拥有资源的基本单位</p><p>进程和线程都可以实现并发</p><p>拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。</p><h3 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h3><p>对称加密：在对称算法中，加密和解密是同一个密钥</p><p>非对称加密：公钥进行加密，私钥进行解密</p><h3 id="什么是数字签名"><a href="#什么是数字签名" class="headerlink" title="什么是数字签名"></a>什么是数字签名</h3><p>1 数字签名是将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解密的摘要信息对比。</p><p>2数字签名是个加密的过程，数字签名验证是个解密的过程</p><p>3数字签名用来保证信息传输的完整性、发送者的身份认证、防止交易中的抵赖发生</p><p> 数字签名，非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开；得到该公用密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方；甲方再用自己保存的另一把专用密钥对加密后的信息进行解密</p><h3 id="TCP-x2F-IP如何保证数据包的有序可靠"><a href="#TCP-x2F-IP如何保证数据包的有序可靠" class="headerlink" title="TCP&#x2F;IP如何保证数据包的有序可靠"></a>TCP&#x2F;IP如何保证数据包的有序可靠</h3><p>对字节流分段进行编号然后通过ACK回复 和超时重发</p><p>1）发送方必须把已经发送的的数据包保留在缓存区</p><ol start="2"><li>并为每个已经发送的数据包启动一个超时定时器</li><li>如果 在定时器超时之前收到对方发过来的应答消息，就是释放缓存</li><li>否则重新传递数据，直达超过最大的次数</li><li>接收方收到数据包后进行CRC校验，如果正确则把数据上交上层协议，并且通知发送方已经收到了</li></ol><h3 id="osi-七层网络模型"><a href="#osi-七层网络模型" class="headerlink" title="osi 七层网络模型"></a>osi 七层网络模型</h3><p>应用层 -》表示层 -》 会话层-》传输层-》网络层-》数据链路层-》物理层</p><h3 id="JSON-和-XML数据的区别"><a href="#JSON-和-XML数据的区别" class="headerlink" title="JSON 和 XML数据的区别"></a>JSON 和 XML数据的区别</h3><ol><li>数据体积方面：xml是重量级的，json是轻量级的，传递的速度更快些。</li><li>数据传输方面：xml在传输过程中比较占带宽，json占带宽少，易于压缩。</li><li>数据交互方面：json与javascript的交互更加方便，更容易解析处理，更好的进行数据交互</li><li>数据描述方面：json对数据的描述性比xml较差</li><li>xml和json都用在项目交互下，xml多用于做配置文件，json用于数据交互。</li></ol><h3 id="在浏览器中输入URL-会发生什么"><a href="#在浏览器中输入URL-会发生什么" class="headerlink" title="在浏览器中输入URL 会发生什么"></a>在浏览器中输入URL 会发生什么</h3><p>1.进行  先查缓存或者进行域名解析， </p><p>2.建立TCP 三次握手 连接</p><p>3.向目标IP地址发送 HTTP请求</p><p>4.处理相应信息</p><p>5.TCP 四次挥手</p><p>6.页面渲染</p><h3 id="HTTP-和-HTTPS"><a href="#HTTP-和-HTTPS" class="headerlink" title="HTTP 和 HTTPS"></a>HTTP 和 HTTPS</h3><p>http： 是一个客户端和服务端请求应答的的标志（TCP）在服务器和浏览器直接传递超文本的，http传输的数据是未加密的，ssl 是用来加密的</p><p>https： 加了ssl层的的 http协议</p><p>https和http的区别</p><p>1.https 协议需要ca 申请证书</p><p>2.https 是加密传输</p><p>3.使用不同的端口，一个是80 一个是443</p><p>4.http 的连接更加简单是无状态的 HTTPS</p><h3 id="常见的-http-status"><a href="#常见的-http-status" class="headerlink" title="常见的 http status"></a>常见的 http status</h3><p>1xx 的状态码很少被使用 100 客户端继续请求 101 切换</p><p>2xx 代表已经成功被服务器接收</p><ul><li>200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。（用于get 和post）</li><li>201 （已创建） 请求成功并且服务器创建了新的资源。</li><li>202 （已接受） 服务器已接受请求，但尚未处理。</li><li>203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</li><li>204 （无内容） 服务器成功处理了请求，但没有返回任何内容。</li><li>205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。</li><li>206 （部分内容） 服务器成功处理了部分 GET 请求。</li></ul><p>3xx  重定向</p><ul><li>300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li><li>301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</li><li>302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li><li>303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</li><li>304 （未修改&#x2F;协议缓存） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</li><li>305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</li><li>307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li></ul><p>4xx表示请求出错</p><ul><li>400 （错误请求） 服务器不理解请求的语法。</li><li>401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403 （禁止） 服务器拒绝请求。</li><li>404 （未找到） 服务器找不到请求的网页。</li><li>405 （方法禁用） 禁用请求中指定的方法。</li><li>406 （不接受） 无法使用请求的内容特性响应请求的网页。</li><li>407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</li><li>408 （请求超时） 服务器等候请求时发生超时。</li><li>409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</li><li>410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</li><li>411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</li><li>412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415 （不支持的媒体类型） 请求的格式不受请求页面的支持。</li><li>416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</li><li>417 （未满足期望值） 服务器未满足”期望”请求标头字段的要求</li></ul><p>5xx表示服务器错误</p><ul><li>500 （服务器内部错误） 服务器遇到错误，无法完成请求。</li><li>501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</li><li>504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</li><li>505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</li></ul><h3 id="HTTPS-协议"><a href="#HTTPS-协议" class="headerlink" title="HTTPS 协议"></a>HTTPS 协议</h3><p>客户端 HTTPS  （引入了数据加密和身份验证机制），TLS：传输安全协议，受TLS协议保护的通信过程</p><p>HTTPS 的作用：</p><p>内容加密，建立一个信息安全通道，来保证数据传输安全</p><p>身份认证，确认网站的真实性</p><p>数据完整性：防止内容冒充和篡改</p><h3 id="http-1x-和http-2主要区别"><a href="#http-1x-和http-2主要区别" class="headerlink" title="http 1x 和http 2主要区别"></a>http 1x 和http 2主要区别</h3><p>1.http2 使用的是二进制传输，http1 是使用 字符串传递</p><p>2.http 支持多路复用（多个请求使用一个连接） 所以通过同一个http请求实现多个http请求传输变成了可能</p><p>3.http2 的头部压缩，通过gzip 和 compress 压缩头部 然后再发送</p><h4 id="HTTP-1-1的缺陷"><a href="#HTTP-1-1的缺陷" class="headerlink" title="HTTP 1.1的缺陷"></a>HTTP 1.1的缺陷</h4><ol><li>高延迟 — 队头阻塞(Head-Of-Line Blocking)</li><li>无状态特性 — 阻碍交互</li><li>明文传输 — 不安全性</li><li>不支持服务端推送</li></ol><h4 id="HTTP-x2F-2"><a href="#HTTP-x2F-2" class="headerlink" title="HTTP &#x2F;2"></a>HTTP &#x2F;2</h4><p>HttP&#x2F;2 传输的数据量大幅减少，以二进制传输，header 压缩，多路复用：域名下所有通信都在单个连接上完成（同一域名占用一个tcp），Server Push(服务器不等请求直接传一些数据到客户端)，出于兼容的考虑，HTTP&#x2F;2延续了HTTP&#x2F;1的“明文”特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密</p><h4 id="http-x2F-3"><a href="#http-x2F-3" class="headerlink" title="http&#x2F;3"></a>http&#x2F;3</h4><p><strong>实现了类似TCP的流量控制、传输可靠性的功能****实现了快速握手功能</strong> ，加密，多路复用彻底解决了 TCP 对头阻塞的问题</p><p>HTTP&#x2F;1.1有两个主要的缺点：安全不足和性能不高。</p><p>HTTP&#x2F;2完全兼容HTTP&#x2F;1，是“更安全的HTTP、更快的HTTPS”，二进制传输、头部压缩、多路复用、服务器推送等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；</p><p>QUIC 基于 UDP 实现，是 HTTP&#x2F;3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。</p><h3 id="https-协议的工作原理"><a href="#https-协议的工作原理" class="headerlink" title="https   协议的工作原理"></a>https   协议的工作原理</h3><ol><li><p>建立 ssl 链接</p></li><li><p>将网站的证书传递给客户端</p></li><li><p>客户端和web服务器协商安全等奖</p></li><li><p>建立会话密钥。客户端公钥加密 服务器私钥解密</p><h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><p>1.建立连接，客户端发送 syn 包</p><p>2.二次握手：服务器受到syn 包确定用户的 SYN 同时发一个自己的 syn</p><p>3.三次握手 客户端收到 syn+ack 包  向服务器发送确认包</p><h3 id><a href="#" class="headerlink" title></a></h3></li></ol><h3 id="axios-拦截器的原理"><a href="#axios-拦截器的原理" class="headerlink" title="axios 拦截器的原理"></a>axios 拦截器的原理</h3><p>请求拦截器一般用于接口请求之前，给请求带上一些数据。返回拦截器用于在接口返回之后做的处理，比如对返回的状态进行判断（token是否过期）;</p><p>响应拦截： 包括 网络错误处理，授权错误处理</p><p>原理：创建一个数组，数组中存dispatchRequest,把请求拦截器存在dispatchRequest前，用unshift插入数组，响应拦截器存在dispatchRequest后，用push，期间为了保证运行的顺序，用队列的方式执行，用promise来保证运行的稳定</p><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。从浏览器中创建 XMLHttpRequests,从 node.js 创建 http 请求,支持 Promise API,可拦截请求和响应，可转换请求数据和响应数据，可取消请求，可自动转换 JSON 数据，客户端支持防御 XSRF</p><p>asxios 配置{</p><p>需要配置 baseurl 和 超时等 </p><p>}封装请求和响应拦截和</p><h3 id="响应拦截器的可以有哪些操作"><a href="#响应拦截器的可以有哪些操作" class="headerlink" title="响应拦截器的可以有哪些操作"></a>响应拦截器的可以有哪些操作</h3><p><strong>URL 路径包含什么</strong></p><p>一个完整的url分为4部分：</p><ol><li>协议 例 Http（超文本传输协议） 、Https、</li><li>域名 例<a href="https://link.jianshu.com/?t=http://www.baidu.com">www.baidu.com</a>为网站名字。 <a href="https://link.jianshu.com/?t=http://baidu.com">baidu.com</a>为一级域名，www是服务</li><li>端口 不填写的话默认走的是80端口号</li><li>路径 <a href="https://link.jianshu.com/?t=http://www.baidu.com/">http://www.baidu.com/</a>路径1&#x2F;路径1.2。&#x2F;表示根目录</li><li>查询参数 <a href="https://link.jianshu.com/?t=http://www.baidu.com/">http://www.baidu.com/</a>路径1&#x2F;路径1.2?name&#x3D;”man”(可有可无)</li></ol><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p><strong>URI</strong>是一个用于标识互联网资源名称的字符串。 该种标识允许用户对网络中（一般指<a href="https://link.jianshu.com/?t=https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">万维网</a>）的资源通过特定的协议进行交互操作。URI的最常见的形式是统一资源定位符（URL），经常指定为非正式的网址。更罕见的用法是统一资源名称（URN），其目的是通过提供一种途径。用于在特定的命名空间资源的标识，以补充网址。</p><p>URL get参数写代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryVariable</span>(<span class="params">variable</span>)&#123;</span><br><span class="line">       <span class="keyword">let</span> query = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>); <span class="comment">// 获取url的参数部分</span></span><br><span class="line">       <span class="keyword">let</span> vars = query.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>); <span class="comment">// 以‘&amp;’为分割符获取参数数组</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;vars.<span class="property">length</span>;i++) &#123; <span class="comment">// 遍历数组获取参数</span></span><br><span class="line">               <span class="keyword">let</span> pair = vars[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span>(pair[<span class="number">0</span>] == variable)&#123;<span class="keyword">return</span> pair[<span class="number">1</span>];&#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展</strong>：</p><p>URL和URN是URI的子集，URI属于URL更高层次的抽象，一种字符串文本标准</p><h3 id="Ajax-原理"><a href="#Ajax-原理" class="headerlink" title="Ajax 原理"></a>Ajax 原理</h3><p>Ajax 是一种异步请求数据的web 请求的技术，AJax 相当于在用户和服务器中设置中间层，通过ajax 代为向服务端请求</p><h3 id="ajax建立-过程"><a href="#ajax建立-过程" class="headerlink" title="ajax建立 过程"></a>ajax建立 过程</h3><p>1.创建xhr 对象</p><p>2.设置请求参数（method，端口地址） open</p><p>3.发送请求 send（）post 请求要加参数 </p><p>4.监听请求成功后的状态变化 根据请求状态处理</p><p>POST请求需要设置请求头 readyState值说明 0：初始化,XHR对象已经创建,还未执行open 1：载入,已经调用open方法,但是还没发送请求 2：载入完成,请求已经发送完成 3：交互,可以接收到部分数据 4：数据全部返回 status值说明 200：成功 404：没有发现文件、查询或URl 500：服务器产生内部错误</p><p>TCP 三次握手</p><p>1.确保可靠的连接</p><p>2.避免资源浪费</p><h3 id="Fetch-请求方式"><a href="#Fetch-请求方式" class="headerlink" title="Fetch 请求方式"></a>Fetch 请求方式</h3><p>标准回答 fetch是一种HTTP数据请求的方式，是XMLHttpRequest的一种替代方案。Fetch函数就是原生js，没有使用XMLHttpRequest对象，返回promise  来判断 Request 请求是否成功</p><p>对比xhr</p><p>XMLHttpRequest的问题 -所有的功能全部集中在一个对象上, 容易书写出混乱而且不容易维护的代码 -采用传统的事件驱动模式, 无法适配新的 Promise API Fetch API的特点 -精细的功能分割: 头部信息, 请求信息, 响应信息等均分布到不同的对象, 更利于处理各种复杂的数据交互场景 -使用Promise API, 更利于异步代码的书写 -同源请求也可以自定义不带 cookie，某些服务不需要 cookie 场景下能少些流量</p><h3 id="如何保存前后端实时通讯"><a href="#如何保存前后端实时通讯" class="headerlink" title="如何保存前后端实时通讯"></a>如何保存前后端实时通讯</h3><p>1,轮询：每隔一段时间前端后端进行一次连接  —容易产生大量流量和cpu 占用，频繁的请求会增加服务器的压力，因此出现了长轮询，客户端发送请求，有消息才会发送请求给客户端，保持连接消耗资源，长时间没有返回结果易导致程序错误</p><p>（早期的即时通讯 类 小型应用）</p><p>2.iframe 流方式 是在在页面中插入iframe  利用 src 属性在客户端和服务器之间建立长连接  兼容性好，长连接会增加开销</p><p>（客服通讯）</p><p>3.WebSocket 一旦建立 连接 后序数据就会以 帧序列的形式进行传输，在客户端断开WebSocket连接或Server端断掉连接前，不需要客户端和服务端重新发起连接请求（微信，网络游戏）</p><p>4.sse  ：单选传递信息 （服务器单向传递信息） 股票看板信息</p><h3 id="option-方式："><a href="#option-方式：" class="headerlink" title="option 方式："></a>option 方式：</h3><p><strong>HTTP 的OPTIONS 方法</strong> 用于获取目的资源所支持的通信选项。客户端可以对特定的 URL 使用 OPTIONS 方法，也可以对整站（通过将 URL 设置为“*”）使用该方法</p><p><strong>作用</strong>：</p><ol><li><p>检测服务器所支持的请求方法</p><p>可以使用 OPTIONS 方法对服务器发起请求，以检测服务器支持哪些 HTTP 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X <span class="variable constant_">OPTIONS</span> <span class="attr">http</span>:<span class="comment">//example.org -i</span></span><br></pre></td></tr></table></figure></li><li><p>CORS 中的预检请求</p><p>在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">CORS</a> 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受。预检请求报文中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method">Access-Control-Request-Method</a> 首部字段告知服务器实际请求所使用的 HTTP 方法；<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers">Access-Control-Request-Headers</a> 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。</p></li></ol><h3 id="get-和post-的区别"><a href="#get-和post-的区别" class="headerlink" title="get 和post 的区别"></a>get 和post 的区别</h3><p>1.get 是幂等 post 是非幂等</p><p>2.get 是获取资源，post 是提交资源</p><p>3.get 会有缓存，post 无</p><p>4.都不安全</p><p>5.url 传递参数： get 是url拼接会限制长度，post 可以提交 表单 JSON 等</p><h3 id="post-和-put"><a href="#post-和-put" class="headerlink" title="post 和 put"></a>post 和 put</h3><p>post 是添加数据 put 是修改数据</p><h3 id="HTTP的请求头"><a href="#HTTP的请求头" class="headerlink" title="HTTP的请求头"></a>HTTP的请求头</h3><p> accpet：能够处理的内容类型</p><p> -charset 能够显示的字符集</p><p>-encoding 压缩编码</p><p>-language 设置的语言</p><p>connection 连接类型</p><p>cookie </p><p>hosst  、referer 发送方 url  user -agent 用户代理</p><p>响应头：Data 、server、connection content</p><p>http1  最大连接只能是6 http2 多路复用 快速加载</p><h3 id="304"><a href="#304" class="headerlink" title="304"></a>304</h3><p>协商缓存命中返回</p><h3 id="常用的请求方法"><a href="#常用的请求方法" class="headerlink" title="常用的请求方法"></a>常用的请求方法</h3><p>get、post put、delete、pathch、options。connet trace</p><h3 id="队头阻塞"><a href="#队头阻塞" class="headerlink" title="队头阻塞"></a>队头阻塞</h3><p>串行进行发送请求 会出现堵塞， 并行发请求，域名分片</p><p> new 运算符的实现机制</p><p>1，首先创建一个新的空对象</p><p>2，设置原型，将对象的原型设置为函数的 prototype 对象</p><p>3，让行的this指向这个对象，执行构造函数</p><ol start="4"><li>判断函数的返回值类型，如果是值类型，就返回创建对象，如果是引用类型，就返回引用类型的对象</li></ol><h2 id="浏览器基础"><a href="#浏览器基础" class="headerlink" title="浏览器基础"></a>浏览器基础</h2><h3 id="浏览器内部结构"><a href="#浏览器内部结构" class="headerlink" title="浏览器内部结构"></a>浏览器内部结构</h3><p>1.用户界面：浏览器提供界面图标</p><p>2.浏览器引擎 用户界面和渲染引擎之间传递</p><p>3.渲染引擎，负责显示请求内容负责解析 HTML和CSS内容</p><p>4.网络：用于网络调用</p><p>5.用户界面后端用于绘制基本窗口小部件</p><p>6.javascript  解释器，用于解析和执行javascript</p><p>7.数据存储，这里是持久层浏览器需要在硬盘上进行数据存储</p><h3 id="V8引擎如何运行代码"><a href="#V8引擎如何运行代码" class="headerlink" title="V8引擎如何运行代码"></a>V8引擎如何运行代码</h3><p>源代码经过词法分析和语法分析 生成 AST  zh之后生成字节码最后编译执行机器码</p><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="32位和64位系统的区别"><a href="#32位和64位系统的区别" class="headerlink" title="32位和64位系统的区别"></a>32位和64位系统的区别</h3><p>1.处理数据的能力64位的能力更高</p><p>2.支持的内存不同（寻址能力的不同）</p><p>3.64位的软件兼容性更强</p><h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><p>进程：指在系统中正在运行的一个应用程序；程序一旦运行就是进程；进程——资源分配的最小单位。</p><p>线程：系统分配处理器时间资源的基本单元，或者说进程之内独立执行的一个单元执行流。线程——程序执行的最小单位。</p><p>进程间通讯：任何一个进程的全局变量在另外一个进程是看不到的，必须同内核的缓存区进行通讯</p><p>管道：管道是一种半双工，数据进行单向流动，而且只能在具有亲缘关系的进程中使用</p><p><strong>有名管道 (namedpipe)</strong></p><p>有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p><p><strong>信号量(semaphore)</strong></p><p>信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p><p><strong>消息队列(messagequeue)</strong></p><p>消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p><p><strong>信号 (signal)</strong></p><p>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p><h2 id="常见手写题"><a href="#常见手写题" class="headerlink" title="常见手写题"></a>常见手写题</h2><h3 id="将树结构和数组结构进行切换"><a href="#将树结构和数组结构进行切换" class="headerlink" title="将树结构和数组结构进行切换"></a>将树结构和数组结构进行切换</h3><p>树结构切换为数组结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">obj, res = []</span>) &#123; <span class="comment">// 默认初始结果数组为[]</span></span><br><span class="line">  res.<span class="title function_">push</span>(obj); <span class="comment">// 当前元素入栈</span></span><br><span class="line">  <span class="comment">// 若元素包含children，则遍历children并递归调用使每一个子元素入栈</span></span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="property">children</span> &amp;&amp; obj.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> obj.<span class="property">children</span>) &#123;</span><br><span class="line">      <span class="title function_">fn</span>(item, res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(arr);</span><br></pre></td></tr></table></figure><p>将数组结构转化为树结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">       <span class="keyword">let</span> arr = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;部门1&#x27;</span>, <span class="attr">pid</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;部门2&#x27;</span>, <span class="attr">pid</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;部门3&#x27;</span>, <span class="attr">pid</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;部门4&#x27;</span>, <span class="attr">pid</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&#x27;部门5&#x27;</span>, <span class="attr">pid</span>: <span class="number">4</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">         <span class="keyword">function</span> <span class="title function_">nest</span>(<span class="params">pid,arr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">pid</span> ===pid).<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>(&#123;...item,<span class="attr">chidren</span>:<span class="title function_">nest</span>(item.<span class="property">id</span>,arr)&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> ans = <span class="title function_">nest</span>(<span class="number">0</span>,arr);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ans);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组扁平化，拆掉括号"><a href="#数组扁平化，拆掉括号" class="headerlink" title="数组扁平化，拆掉括号"></a>数组扁平化，拆掉括号</h3><p>传入 [1,[[2],3,4],5] ，返回 [1,2,3,4,5]</p><p>如果有数组就拆分放进去：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组拓展</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (arr.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">        arr = [].<span class="title function_">concat</span>(...arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 tostring 的方法</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">i</span>=&gt;</span><span class="title class_">Number</span>(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr)); <span class="comment">//  [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]]];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr)); <span class="comment">//  [1, 2, 3, 4，5]</span></span><br></pre></td></tr></table></figure><h3 id="如何拆分获取-url-里面的参数"><a href="#如何拆分获取-url-里面的参数" class="headerlink" title="如何拆分获取 url 里面的参数"></a>如何拆分获取 url 里面的参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 url中 ？后面的字符串</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GetRequest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> url=location.<span class="property">search</span> ;</span><br><span class="line">    <span class="keyword">var</span> theRequest=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">if</span>(url.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>)!=-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> str =url.<span class="title function_">substr</span>(<span class="number">1</span>);</span><br><span class="line">        strs=str.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;strs.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            theRequest[strs[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>]]=<span class="built_in">unescape</span>(strs[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> theRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用正则和非正则来实现千分制显示"><a href="#用正则和非正则来实现千分制显示" class="headerlink" title="用正则和非正则来实现千分制显示"></a>用正则和非正则来实现千分制显示</h3><p>如果传入带小数点的</p><p>直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.<span class="title function_">toLocalString</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=(?:\d&#123;3&#125;)+$)/g</span>,<span class="string">&#x27;$1,&#x27;</span>)</span><br></pre></td></tr></table></figure><p>不带小数点的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">numFormat</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = (num.<span class="title function_">toString</span>().<span class="property">indexOf</span> (<span class="string">&#x27;.&#x27;</span>) !== -<span class="number">1</span>) ? num.<span class="title function_">toLocaleString</span>() : </span><br><span class="line">             num.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/(\d)(?=(?:\d&#123;3&#125;)+$)/g</span>, <span class="string">&#x27;$1,&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">方法一：利用set的唯一特效 不考虑兼容性</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span>  <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line">简化版： [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line">方法二：利用indexOf去重 创建一个空数组(遍历原数组，新数组没有就扔进去)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newarr=[]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(newarr.<span class="title function_">indexOf</span>(arr[i])===-<span class="number">1</span>)&#123;</span><br><span class="line">            newarr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newarr</span><br><span class="line">&#125;</span><br><span class="line">方法三：利用<span class="keyword">for</span>循环嵌套，用splice去重相邻两个比较，然后删除</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                    arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="伪数组转化"><a href="#伪数组转化" class="headerlink" title="伪数组转化"></a>伪数组转化</h3><ol><li>Array.from()</li><li>Array.prototype.slice.call()</li></ol><h3 id="节流防抖"><a href="#节流防抖" class="headerlink" title="节流防抖"></a>节流防抖</h3><p>节流防抖是用于高频率执行代码的手段</p><p>防抖（debounce ），节流（throttle）的方式来减少调用频率  </p><p>防抖：n 秒 中执行某一个事件，如果 中途被打断就会重新计时（搜索框输入触发的表单提交、调整窗口大小Resize）</p><p>节流：n秒中只执行该事件一次重复触发 只有第一次有效 （高频点击后的表单提交，滚动加载，搜索联想）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用时间戳的写法 fn 是 要进行节流的事件 停止触发之后会有问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttled</span>(<span class="params">fn,delay=<span class="number">500</span></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> oldtime =<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> newtime =<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line"><span class="keyword">if</span>(newtime-oldtime &gt;= delay)&#123;</span><br><span class="line">    fn.<span class="title function_">apply</span>(<span class="literal">null</span>,args)</span><br><span class="line">    oldtime =<span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用定时器的写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,delay=<span class="number">500</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">            timer =<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args)</span><br><span class="line">                timer =<span class="literal">null</span></span><br><span class="line">            &#125;,delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span> (f, wait) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">f</span>(...args)</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">        &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浅拷贝，深拷贝"><a href="#浅拷贝，深拷贝" class="headerlink" title="浅拷贝，深拷贝"></a>浅拷贝，深拷贝</h3><p>1，Object.assign 方法 进行浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;,obj)</span><br></pre></td></tr></table></figure><p>2 for in方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simpleCopy</span>(<span class="params">obj1</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj2=<span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj1)?[]:&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj1)&#123;</span><br><span class="line">        obj[i]=obj1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现深拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用递归的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> objClone = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj)?[]:&#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(obj &amp;&amp; <span class="keyword">typeof</span> obj===<span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">                <span class="comment">//判断ojb子元素是否为对象，如果是，递归复制</span></span><br><span class="line">                <span class="keyword">if</span>(obj[key]&amp;&amp;<span class="keyword">typeof</span> obj[key] ===<span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">                    objClone[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//如果不是，简单复制</span></span><br><span class="line">                    objClone[key] = obj[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objClone;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">let</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    b=<span class="title function_">deepClone</span>(a);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b);</span><br></pre></td></tr></table></figure><p>使用 json 的方法进行深拷贝</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function deepCopy(obj1)&#123;</span><br><span class="line">let  _obj=JSON.stringfy(obj1);</span><br><span class="line">let obj2=JSON.parse(_obj);</span><br><span class="line">return obj2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 热门的函数库lodash </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var _= require(&#x27;lodash&#x27;);</span><br><span class="line">var obj2 =_.cloneDeep(obj1);</span><br></pre></td></tr></table></figure><h3 id="获取当前页面的url"><a href="#获取当前页面的url" class="headerlink" title="获取当前页面的url"></a>获取当前页面的url</h3><ol><li>window.location.href (设置或获取整个 URL 为字符串)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="comment">//  返回：http://i.cnblogs.com/EditPosts.aspx?opt=1</span></span><br></pre></td></tr></table></figure><ol><li>window.location.protocol (设置或获取 URL 的协议部分)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">protocol</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="comment">//返回：http:</span></span><br></pre></td></tr></table></figure><ol><li>window.location.host (设置或获取 URL 的主机部分)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">host</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="comment">//返回：i.cnblogs.com</span></span><br></pre></td></tr></table></figure><ol><li>window.location.port (设置或获取与 URL 关联的端口号码)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">port</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="comment">//返回：空字符(如果采用默认的80端口 (update:即使添加了:80)，那么返回值并不是默认的80而是空字符)</span></span><br></pre></td></tr></table></figure><ol><li>window.location.pathname (设置或获取与 URL 的路径部分（就是文件地址）)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="comment">//返回：/EditPosts.aspx</span></span><br></pre></td></tr></table></figure><ol><li>window.location.search (设置或获取 href 属性中跟在问号后面的部分)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="comment">//返回：?opt=1</span></span><br><span class="line">（<span class="variable constant_">PS</span>：获得查询（参数）部分，除了给动态语言赋值以外，我们同样可以给静态页面，并使用javascript来获得相信应的参数值。）</span><br></pre></td></tr></table></figure><ol><li>window.location.hash (设置或获取 href 属性中在井号“#”后面的分段)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>;</span><br><span class="line"><span class="title function_">alert</span>(test);</span><br><span class="line"><span class="comment">//返回：空字符(因为url中没有)</span></span><br></pre></td></tr></table></figure><h3 id="字符串逆序输出"><a href="#字符串逆序输出" class="headerlink" title="字符串逆序输出"></a>字符串逆序输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strReverse</span>(<span class="params">str</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快排算法"><a href="#快排算法" class="headerlink" title="快排算法"></a>快排算法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quickSortn = <span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="comment">// 如果到了最小的长度就直接返回数组</span></span><br><span class="line">    <span class="keyword">if</span>(arr.<span class="property">length</span>&lt;=<span class="number">1</span>)&#123;<span class="keyword">return</span> arr;&#125;</span><br><span class="line">    <span class="comment">// 锚点的坐标是中间的</span></span><br><span class="line">    <span class="keyword">var</span> pivotIndex=<span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span>/<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 切出锚点元素</span></span><br><span class="line">    <span class="keyword">var</span> pivot =arr.<span class="title function_">splice</span>(pivotIndex,<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 分出两个左右数组</span></span><br><span class="line">    <span class="keyword">var</span> left=[];</span><br><span class="line">    <span class="keyword">var</span> rigth=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="comment">// 把左右的数分到两边</span></span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;pivot)&#123;</span><br><span class="line">            left.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>([pivot],<span class="title function_">quickSort</span>(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见的排序算法-和它们的时间复杂度"><a href="#常见的排序算法-和它们的时间复杂度" class="headerlink" title="常见的排序算法 和它们的时间复杂度"></a>常见的排序算法 和它们的时间复杂度</h3><table><thead><tr><th>冒泡排序(bubble sort)</th><th>最差、平均都是O(n^2)，最好是O(n)</th><th>1</th></tr></thead><tbody><tr><td>插入排序(insertion sort)</td><td>最差、平均都是O(n^2)，最好是O(n)</td><td>1</td></tr><tr><td>归并排序(merge sort)</td><td>最差、平均、最好都是O(n log n)</td><td>O(n)</td></tr><tr><td>桶排序(bucket sort)</td><td>O(n)</td><td>O(k)</td></tr><tr><td>基数排序(Radix sort)</td><td>O(nk)（k是常数）</td><td>O(n)</td></tr><tr><td>二叉树排序(Binary tree sort)</td><td>O(n log n)</td><td>O(n)</td></tr></tbody></table><table><thead><tr><th>选择排序(selection sort)</th><th>最差、平均都是O(n^2)</th><th>1</th></tr></thead><tbody><tr><td>希尔排序(shell sort)</td><td>O(n log n)</td><td>1</td></tr><tr><td>堆排序(heapsort)</td><td>最差、平均、最好都是O(n log n)</td><td>1</td></tr><tr><td>快速排序(quicksort)</td><td>平均是O(n log n)，最差是O(n^2)</td><td>O(log n)</td></tr></tbody></table><p>“归并”的意思是将两个或两个以上的有序表组合成一个新的有序表。假如初始序列含有n个记录，则可看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到[n&#x2F;2]（向上取整）个长度为2或1的有序子序列；再两两归并，……，如此重复，直到得到一个长度为n的有序序列为止，这种排序方法称为2-路归并排序。</p><p>1、把长度为n的输入序列分成两个长度为n&#x2F;2的子序列；</p><p>2、对这两个子序列继续分为m&#x2F;2的子序列，一直分下去，直为1个元素；</p><p>3、将两个排序好的子序列合并成一个最终的排序序列。</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">if</span>(len &lt; <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//首先将无序数组划分为两个数组</span></span><br><span class="line">  <span class="keyword">var</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(len / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>,mid);</span><br><span class="line">  <span class="keyword">var</span> right = arr.<span class="title function_">slice</span>(mid,len);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left),<span class="title function_">mergeSort</span>(right));<span class="comment">//递归分别对左右两部分数组进行排序合并</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left,right</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">while</span>(left.<span class="property">length</span>&gt;<span class="number">0</span> &amp;&amp; right.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(left[<span class="number">0</span>]&lt;=right[<span class="number">0</span>])&#123;</span><br><span class="line">      <span class="comment">//如果左边的数据小于右边的数据，将左边数据取出，放在新数组中</span></span><br><span class="line">      result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(left.<span class="property">length</span>)&#123;</span><br><span class="line">     result.<span class="title function_">push</span>(left.<span class="title function_">shift</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(right.<span class="property">length</span>)&#123;</span><br><span class="line">     result.<span class="title function_">push</span>(right.<span class="title function_">shift</span>());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第K大的数"><a href="#第K大的数" class="headerlink" title="第K大的数"></a>第K大的数</h3><p>let  findKthLargest &#x3D;function(nums,k){</p><p>nums.sort ((a,b)&#x3D;&gt;b-a);</p><p>return nums[k-1];</p><p>}</p><h3 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(s.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp =s;</span><br><span class="line">        s = s.<span class="title function_">replace</span>(<span class="string">&#x27;()&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        s = s.<span class="title function_">replace</span>(<span class="string">&#x27;[]&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        s = s.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(s==temp)<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="翻转单链表"><a href="#翻转单链表" class="headerlink" title="翻转单链表"></a>翻转单链表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseList =<span class="keyword">function</span>(<span class="params">head</span>)&#123;</span><br><span class="line">    <span class="comment">// 确定退出条件</span></span><br><span class="line">    <span class="keyword">if</span>(!head||!head.<span class="property">next</span>) <span class="keyword">return</span> head;</span><br><span class="line">    <span class="keyword">var</span> next =head.<span class="property">next</span>;</span><br><span class="line">    <span class="comment">//递归翻转</span></span><br><span class="line">   <span class="keyword">var</span> reverseHead = <span class="title function_">reverseList</span>(next);</span><br><span class="line">   <span class="comment">// 变更指针</span></span><br><span class="line">    next.<span class="property">next</span>=head;</span><br><span class="line">    head.<span class="property">next</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 返回节点</span></span><br><span class="line">    <span class="keyword">return</span> reverseHead;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二叉树的实际应用"><a href="#二叉树的实际应用" class="headerlink" title="二叉树的实际应用"></a>二叉树的实际应用</h3><ol><li>哈夫曼编码，来源于哈夫曼树（给定n个权值作为n个叶子结点，构造一棵<a href="http://blog.csdn.net/hguisu/article/details/7686515">二叉树</a>，若带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为赫夫曼树(Huffman tree)。即带权路径长度最短的树），在数据压缩上有重要应用，提高了传输的有效性，详见《信息论与编码》。</li><li>海量数据并发查询，二叉树复杂度是O(K+LgN)。二叉排序树就既有链表的好处，也有数组的好处， 在处理大批量的动态的数据是比较有用。</li><li>C++ STL中的set&#x2F;multiset、map，以及Linux虚拟内存的管理，都是通过红黑树去实现的。查找最大（最小）的k个数，红黑树，红黑树中查找&#x2F;删除&#x2F;插入，都只需要O(logk)。</li><li>B-Tree，B+-Tree在文件系统中的目录应用。</li><li>路由器中的路由搜索引擎。</li></ol><h3 id="数组和链表的优缺点"><a href="#数组和链表的优缺点" class="headerlink" title="数组和链表的优缺点"></a>数组和链表的优缺点</h3><p><strong>数组</strong>:存放内存地址必须连续的.<br>查找的时候很方便,可以通过数组下标获取数据;<br>添加删除很不方便,如果插入一个元素,必须这个元素后面的元素都往后移一个内存地址<br>删除,所有后面元素都往前移动一个内存地址</p><p><strong>链表</strong>:存放内存地址可以不连续,存放方式是通过元素中的指针,来寻找下一个元素.<br>这种结构添加删除元素很容易,只要修改指针指向下下个元素,就能删除,而添加则是<br>一个元素的指针指向后面的插入位置后面的元素,插入位置的指针指向插入元素就行</p><p>优点:查询速度快,可随机访问<br>缺点:</p><p>数组</p><ol><li>删除插入效率低,</li><li>内存必须连续</li><li>有浪费内存的可能</li><li>数组大小固定,不能动态拓展</li></ol><p><strong>链表</strong><br>优点:插入删除速度快,内存不需要连续,大小可以不固定<br>缺点:查询效率低,每次通过第一个开始遍历,只能顺序访问,不支持随机访问</p><h3 id="1000w条数据如何排序，取前一百个"><a href="#1000w条数据如何排序，取前一百个" class="headerlink" title="1000w条数据如何排序，取前一百个"></a>1000w条数据如何排序，取前一百个</h3><p>1.根据快速排序划分的思想</p><p>2.假设数组arr保存100个数字，首先取前100个数字放入数组arr，对于第101个数字k，如果k大于arr中的最小数，则用k替换最小数，对剩下的数字都进行这种处理。</p><p>3.先把100w个数分成100份，每份1w个数。先分别找出每1w个数里面的最大的数，然后比较。找出100个最大的数中的最大的数和最小的数，取最大数的这组的第二大的数，与最小的数比较</p><h3 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h3><p>用两个栈来实现一个队列，完成队列的 Push 和 Pop 操作。</p><p>队列的一个基本特点是，元素先进先出。通过两个栈来模拟时，首先我们将两个栈分为栈 1 和栈 2。当执行队列的 push 操作时，直接<br>将元素 push 进栈 1 中。当队列执行 pop 操作时，首先判断栈 2 是否为空，如果不为空则直接 pop 元素。如果栈 2 为空，则将栈 1 中的所有元素 pop 然后 push 到栈 2 中，然后再执行栈 2 的 pop 操作。</p><h2 id="Webpack的优化"><a href="#Webpack的优化" class="headerlink" title="Webpack的优化"></a>Webpack的优化</h2><p>1.优化 Webpack 的构建速度</p><p>1.使用 高版本的  Webpack</p><p>2.多线程&#x2F;多实例构建</p><p>3.充分利用缓存提升二次构建速度</p><h2 id="react-基础知识"><a href="#react-基础知识" class="headerlink" title="react 基础知识"></a>react 基础知识</h2><h3 id="虚拟dom"><a href="#虚拟dom" class="headerlink" title="虚拟dom"></a>虚拟dom</h3><p>虚拟相对于在js和真实dom中间一个缓存，利用dom diff算法避免没必要 dom 操作从而提高性能</p><p>实现过程</p><p>1.用js对象结构表示dom树的结构</p><p>2.用这个数构建一个真正的树结构，插入到文档中当状态变化，重新构建一颗新的对象树</p><p>3 .新旧树进行对比</p><p>虚拟dom 和 real dom 区别性能区别</p><p>real Dom：更新较慢，直接更新HTML，DOM操作代价比较高，销毁内存比较大</p><p>virtual Dom：更新比较快，无法直接更新HTML,如果元素更新则可以更新jsx</p><p>Dom 操作简单，很少使用 内存消耗</p><h3 id="解释-React-中-render-的目的。"><a href="#解释-React-中-render-的目的。" class="headerlink" title=". 解释 React 中 render() 的目的。"></a><strong>. 解释 React 中 render() 的目的。</strong></h3><p>每个React组件强制要求必须有一个 **render()**。它返回一个 React 元素，是原生 DOM 组件的表示。如果需要渲染多个 HTML 元素，则必须将它们组合在一个封闭标记内，例如 <code>&lt;form&gt;</code>、<code>&lt;group&gt;</code>、<code>&lt;div&gt;</code> 等。此函数必须保持纯净，即必须每次调用时都返回相同的结果。</p><h3 id="react-组件"><a href="#react-组件" class="headerlink" title="react 组件"></a>react 组件</h3><p>React 中一切都是组件。 我们通常将应用程序的整个逻辑分解为小的单个部分。 我们将每个单独的部分称为组件。 通常，组件是一个javascript函数，它接受输入，处理它并返回在UI中呈现的React元素。</p><p>在React中有不同类型的组件。让我们详细看看。</p><h4 id="函数-x2F-无状态-x2F-展示组件"><a href="#函数-x2F-无状态-x2F-展示组件" class="headerlink" title="函数&#x2F;无状态&#x2F;展示组件"></a>函数&#x2F;无状态&#x2F;展示组件</h4><p>函数或无状态组件是一个纯函数，它可接受接受参数，并返回react元素。这些都是没有任何副作用的纯函数。这些组件没有状态或生命周期方法，这里有一个例子。</p><h4 id="类-x2F-有状态组件"><a href="#类-x2F-有状态组件" class="headerlink" title="类&#x2F;有状态组件"></a>类&#x2F;有状态组件</h4><p>类或有状态组件具有状态和生命周期方可能通过<code>setState()</code>方法更改组件的状态。类组件是通过扩展React创建的。它在构造函数中初始化，也可能有子组件,这里有一个例子。</p><h4 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h4><p>受控组件是在 React 中处理输入表单的一种技术。表单元素通常维护它们自己的状态，而react则在组件的状态属性中维护状态。我们可以将两者结合起来控制输入表单。这称为受控组件。因此，在受控组件表单中，数据由React组件处理。</p><h4 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h4><p>大多数情况下，建议使用受控组件。有一种称为非受控组件的方法可以通过使用<code>Ref</code>来处理表单数据。在非受控组件中，<code>Ref</code>用于直接从<code>DOM</code>访问表单值，而不是事件处理程序。</p><p>我们使用<code>Ref</code>构建了相同的表单，而不是使用React状态。 我们使用<code>React.createRef()</code> 定义<code>Ref</code>并传递该输入表单并直接从<code>handleSubmit</code>方法中的<code>DOM</code>访问表单值。</p><h3 id="react-组件间的通讯"><a href="#react-组件间的通讯" class="headerlink" title="react 组件间的通讯"></a>react 组件间的通讯</h3><p>父子组件的通讯：父组件可以向子组件传递props</p><p>子组件向父组件进行通讯：props +回调的方式，父组件向子组件</p><p>兄弟组件之间的通讯：找到两个节点的共同父节点，结合父子通讯的的方式进行通讯</p><p>跨级通讯：context 设计目的是为了</p><p>发布订阅模式：发布者发布事件，可以通过引入event 进行通讯</p><p>全局管理：全局状态管理工具: 借助Redux或者Mobx等全局状态管理工具进行通信,这种工具会维护一个全局状态中心Store,并根据不同的事件产生新的状态</p><p>Redux遵循的三个原则：</p><p>1.单一事实来源：整个应用的状态存储在单个 store 中的对象&#x2F;状态树里。单一状态树可以更容易地跟踪随时间的变化，并调试或检查应用程序</p><p>2.状态只读：改变状态的唯一方法是去触发一个动作。动作是描述变化的普通 JS 对象。就像 state 是数据的最小表示一样，该操作是对数据更改的最小表示</p><p>3使用纯函数进行更改：为了指定状态树如何通过操作进行转换，你需要纯函数。纯函数是那些返回值仅取决于其参数值的函数。</p><h3 id="Redux-的原理"><a href="#Redux-的原理" class="headerlink" title="Redux 的原理"></a>Redux 的原理</h3><p><strong>Redux：</strong>Redux 是当今最热门的前端开发库之一。它是 JavaScript 程序的可预测状态容器，用于整个应用的状态管理。使用 Redux 开发的应用易于测试，可以在不同环境中运行，并显示一致的行为。</p><ol><li>首先，用户（通过View）发出Action，发出方式就用到了dispatch方法。</li><li>然后，Store自动调用Reducer，并且传入两个参数：当前State和收到的Action，Reducer会返回新的State</li><li>State一旦有变化，Store就会调用监听函数，来更新View</li></ol><p>readux 由以下组件组成：</p><ol><li><strong>Action</strong> – 这是一个用来描述发生了什么事情的对象。</li><li><strong>Reducer</strong> – 这是一个确定状态将如何变化的地方。</li><li><strong>Store</strong> – 整个程序的状态&#x2F;对象树保存在Store中。</li><li><strong>View</strong> – 只显 示Store 提供的数据。</li></ol><p>redux 有哪些优点</p><p>React 组件的生命周期有三个不同的阶段：</p><ol><li>初始渲染阶段：这是组件即将开始其生命之旅并进入 DOM 的阶段。</li><li>更新阶段：一旦组件被添加到 DOM，它只有在 prop 或状态发生变化时才可能更新和重新渲染。这些只发生在这个阶段。</li><li>卸载阶段：这是组件生命周期的最后阶段，组件被销毁并从 DOM 中删除。</li></ol><p>  1.挂载阶段：</p><ul><li>constructor: 构造函数，最先被执行,我们通常在构造函数里初始化state对象或者给自定义方法绑定this</li><li>getDerivedStateFromProps:static getDerivedStateFromProps(nextProps, prevState),这是个静态方法,当我们接收到新的属性想去修改我们state，可以使用getDerivedStateFromProps</li><li>render: render函数是纯函数，只返回需要渲染的东西，不应该包含其它的业务逻辑,可以返回原生的DOM、React组件、Fragment、Portals、字符串和数字、Boolean和null等内容</li><li>componentDidMount: 组件装载之后调用，此时我们可以获取到DOM节点并操作，比如对canvas，svg的操作，服务器请求，订阅都可以写在这个里面，但是记得在componentWillUnmount中取消订阅</li></ul><ol start="2"><li><p>更新阶段</p><p>getDerivedStateFromProps: 此方法在更新个挂载阶段都可能会调用</p><p>shouldComponentUpdate:shouldComponentUpdate(nextProps, nextState),有两个参数nextProps和nextState，表示新的属性和变化之后的state，返回一个布尔值，true表示会触发重新渲染，false表示不会触发重新渲染，默认返回true,我们通常利用此生命周期来优化React程序性能</p><p>render: 更新阶段也会触发此生命周期</p><p>getSnapshotBeforeUpdate:getSnapshotBeforeUpdate(prevProps, prevState),这个方法在render之后，componentDidUpdate之前调用，有两个参数prevProps和prevState，表示之前的属性和之前的state，这个函数有一个返回值，会作为第三个参数传给componentDidUpdate，如果你不想要返回值，可以返回null，此生命周期必须与componentDidUpdate搭配使用</p><p>componentDidUpdate:componentDidUpdate(prevProps, prevState, snapshot),该方法在getSnapshotBeforeUpdate方法之后被调用，有三个参数prevProps，prevState，snapshot，表示之前的props，之前的state，和snapshot。第三个参数是getSnapshotBeforeUpdate返回的,如果触发某些回调函数时需要用到 DOM 元素的状态，则将对比或计算的过程迁移至 getSnapshotBeforeUpdate，然后在 componentDidUpdate 中统一触发回调或更新状态。</p><p>卸载阶段</p></li><li><p>componentWillUnmount: 当我们的组件被卸载或者销毁了就会调用，我们可以在这个函数里去清除一些定时器，取消网络请求，清理无效的DOM元素等垃圾清理工作</p></li></ol><h3 id="react-rounter"><a href="#react-rounter" class="headerlink" title="react rounter"></a>react rounter</h3><p> React 路由是一个构建在 React 之上的强大的路由库，它有助于向应用程序添加新的屏幕和流。这使 URL 与网页上显示的数据保持同步。它负责维护标准化的结构和行为，并用于开发单页 Web 应用。 React 路由有一个简单的API。</p><ol><li><p>为什么需要 React 中的路由？</p><p>Router 用于定义多个路由，当用户定义特定的 URL 时，如果此 URL 与 Router 内定义的任何 “路由” 的路径匹配，则用户将重定向到该特定路由。所以基本上我们需要在自己的应用中添加一个 Router 库，允许创建多个路由，每个路由都会向我们提供一个独特的视图</p></li><li><p>为什么React Router v4中使用 switch 关键字 ？</p><p>虽然<div>用于封装 Router 中的多个路由，当你想要仅显示要在多个定义的路线中呈现的单个路线时，可以使用 “switch” 关键字。使用时，<switch>标记会按顺序将已定义的 URL 与已定义的路由进行匹配。找到第一个匹配项后，它将渲染指定的路径。从而绕过其它路线。</switch></div></p></li><li><p>列出 React Router 的优点</p><p>4.1 就像 React 基于组件一样，在 React Router v4 中，API 是 ‘All About Components’。可以将 Router 可视化为单个根组件（），其中我们将特定的子路由（）包起来。</p><p>4.2 无需手动设置历史值：在 React Router v4 中，我们要做的就是将路由包装在 组件中。</p><p>4.3 包是分开的：共有三个包，分别用于 Web、Native 和 Core。这使我们应用更加紧凑。基于类似的编码风格很容易进行切换。</p><p>hooks 的优缺点：</p><p>更加容易复用代码</p><p>这点应该是react hooks最大的优点，它通过自定义hooks来复用状态，从而解决了类组件有些时候难以复用逻辑的问题。类组件的逻辑复用方式是高阶组件和renderProps。hooks是怎么解决这个复用的问题呢，具体如下：</p><ol><li>每调用useHook一次都会生成一份独立的状态，这个没有什么黑魔法，函数每次调用都会有一份独立的作用域。</li><li>虽然状态(from useState)和副作用(useEffect)的存在依赖于组件，但它们可以在组件外部进行定义。这点是class component做不到的，你无法在外部声明state和副作用（如componentDidMount）。</li></ol><h4 id="清爽的代码风格"><a href="#清爽的代码风格" class="headerlink" title="清爽的代码风格"></a><strong>清爽的代码风格</strong></h4><p>函数式编程风格，函数式组件、状态保存在运行环境、每个功能都包裹在函数中，整体风格更清爽，更优雅</p><h4 id="代码量更少"><a href="#代码量更少" class="headerlink" title="代码量更少"></a><strong>代码量更少</strong></h4><ol><li><p>向props或状态取值更加方便，函数组件的取值都从父级作用域直接取，而类组件需要先访问实例引用this，再访问其属性state和props，多了一步</p></li><li><p>更改状态也变得更加简单, this.setState({ count:xxx })变成 setCount(xxx)。</p><h4 id="更容易发现无用的状态和函数"><a href="#更容易发现无用的状态和函数" class="headerlink" title="更容易发现无用的状态和函数**"></a>更容易发现无用的状态和函数**</h4><p>对比类组件，函数组件里面的unused状态和函数更容易被发现</p><p><strong>更容易拆分组件</strong></p><p>写函数组件的时候，你会更愿意去拆分组件，因为函数组件写起小组件比类组件要省事。</p><p>缺点</p><p>部分代码从主从式变为响应式</p><h3 id="状态不同步的问题"><a href="#状态不同步的问题" class="headerlink" title="状态不同步的问题"></a>状态不同步的问题</h3></li></ol><h3 id="jsx-语言"><a href="#jsx-语言" class="headerlink" title="jsx 语言"></a>jsx 语言</h3><p>浏览器语言只处理 js对象，需要babel 对其进行转化，jsx 是js 的语法拓展 vue3 cli 可以直接使用</p><h3 id="refs-问题"><a href="#refs-问题" class="headerlink" title="refs 问题"></a>refs 问题</h3><p>Refs 是 React 中引用的简写。它是一个有助于存储对特定的 React 元素或组件的引用的属性，它将由组件渲染配置函数返回。用于对 render() 返回的特定元素或组件的引用。当需要进行 DOM 测量或向组件添加方法时，它们会派上用场。</p><ul><li>需要管理焦点、选择文本或媒体播放时</li><li>触发式动画</li><li>与第三方 DOM 库集成</li></ul></li></ol><h3 id="React-事件绑定原理"><a href="#React-事件绑定原理" class="headerlink" title="React 事件绑定原理"></a>React 事件绑定原理</h3><p>React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。<br>另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用event.preventDefault。</p><p>React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。<br>另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用event.preventDefault。</p><p>另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用event.preventDefault。</p><h3 id="redux-saga-和-mobx-的比较"><a href="#redux-saga-和-mobx-的比较" class="headerlink" title="redux-saga 和 mobx 的比较"></a>redux-saga 和 mobx 的比较</h3><ol><li>状态管理</li></ol><ul><li>redux-sage 是 redux 的一个异步处理的中间件。</li><li>mobx 是数据管理库，和 redux 一样。</li><li>redux-sage 属于 flux 体系， 函数式编程思想。</li><li>mobx 不属于 flux 体系，面向对象编程和响应式编程。</li><li>数据可变性</li><li>redux-sage 强调 state 不可变，不能直接操作 state，通过 action 和 reducer 在原来的 state 的基础上返回一个新的 state 达到改变 state 的目的。</li><li>mobx 直接在方法中更改 state，同时所有使用的 state 都发生变化，不生成新的 state。</li><li>使用场景</li><li>redux-sage 很好的解决了 redux 关于异步处理时的复杂度和代码冗余的问题，数据流向比较好追踪。但是 redux 的学习成本比 较高，代码比较冗余，不是特别需要状态管理，最好用别<br>的方式代替。</li><li>mobx 学习成本低，能快速上手，代码比较简洁。但是可能因为代码编写的原因和数据更新时相对黑盒，导致数据流向不利于追踪。</li></ul><h3 id="React-的源码实现"><a href="#React-的源码实现" class="headerlink" title="React 的源码实现"></a>React 的源码实现</h3><ol><li>React 的实现主要分为Component和Element；</li><li>Component属于 React 实例，在创建实例的过程中会在实例中注册state和props属性，还会依次调用内置的生命周期函数；</li><li>Component中有一个render函数，render函数要求返回一个Element对象（或null）；</li><li>Element对象分为原生Element对象和组件式对象，原生Element+ 组件式对象会被一起解析成虚拟 DOM 树，并且内部使用的state和props也以 AST 的形式注入到这棵虚拟 DOM 树之中；</li><li>在渲染虚拟 DOM 树的前后，会触发 React Component 的一些生命周期钩子函数，比如componentWillMount和componentDidMount，在虚拟 DOM 树解析完成后将被渲染成真实 DOM 树；</li><li>调用setState时，会调用更新函数更新Component的state，并且触发内部的一个updater，调用render生成新的虚拟 DOM 树，利用 diff 算法与旧的虚拟 DOM 树进行比对，比对以后利用最优的方案进行 DOM 节点的更新，这也是 React 单向数据流的原理（与 Vue 的 MVVM 不同之处）。</li></ol><h3 id="setState-是同步还是异步"><a href="#setState-是同步还是异步" class="headerlink" title="setState 是同步还是异步"></a>setState 是同步还是异步</h3><p>有时表现出异步,有时表现出同步</p><ol><li>setState只在合成事件和钩子函数中是“异步”的，在原生事件和setTimeout中都是同步的。</li><li>setState的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”，当然可以通过第二个参数setState(partialState, callback)中的callback拿到更新后的结果。</li><li>setState的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次setState，setState的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时setState多个不同的值，在更新时会对其进行合并批量更新。</li></ol><p>redux-saga的缺陷</p><ul><li>额外的学习成本: redux-saga不仅在使用难以理解的 generator function,而且有数十个API,学习成本远超redux-thunk,最重要的是你的额外学习成本是只服务于这个库的,与redux-observable不同,redux-observable虽然也有额外学习成本但是背后是rxjs和一整套思想</li><li>体积庞大: 体积略大,代码近2000行，min版25KB左右</li><li>功能过剩: 实际上并发控制等功能很难用到,但是我们依然需要引入这些代码</li><li>ts支持不友好: yield无法返回TS类型</li></ul><p>当 调用 setState时，React render 是如何进行工作的</p><p>虚拟 DOM 渲染:当render方法被调用时，它返回一个新的组件的虚拟 DOM 结构。当调用setState()时，render会被再次调用，因为默认情况下shouldComponentUpdate总是返回true，所以默认情况下 React 是没有优化的。<br>原生 DOM 渲染:React 只会在虚拟DOM中修改真实DOM节点，而且修改的次数非常少——这是很棒的React特性，它优化了真实DOM的变化，使React变得更快。</p><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><h3 id="Node-导入导出和ES6的区别"><a href="#Node-导入导出和ES6的区别" class="headerlink" title="Node 导入导出和ES6的区别"></a>Node 导入导出和ES6的区别</h3><p>node commonjs 规范模块化</p><ol><li>module对象为模块运行时生成的标识对象，提供模块信息；</li><li>exports为模块导出引用数据类型时，modulex.exports与exports指向的是同一对象，require导入的是module.exports导出的对象；</li><li>同一模块导入后存在模块缓存，后续多次导入从缓存中加载；</li><li>源模块的引用与导入该模块的引用是同一对象；</li><li>最好不要同时使用module.exports与exports，导出对象使用module.exports，导出变量使用exports。</li></ol><p>es6规范模块化</p><ol><li>es6通过export和import实现导出导入功能；</li><li>es6 export支持导出多个变量，export default是export形式的语法糖，表示导出default接口；</li><li>import * as xx from ‘xx.js’导入的是Module对象，包含default接口和其他变量接口；</li><li>多个模块导入多次，只会执行一次；</li><li>导出引用数据类型时，导出对象与导入对象指向同一个变量，修改导出变量对象，源对象也会发生改变。</li><li>导出单个变量建议使用export default，导出多个变量使用export。</li></ol><h3 id="Node在中间件"><a href="#Node在中间件" class="headerlink" title="Node在中间件"></a>Node在中间件</h3><p>在NodeJS中，中间件主要是指封装所有Http请求细节处理的方法。一次Http请求通常包含很多工作，如记录日志、ip过滤、查询字符串、请求体解析、Cookie处理、权限验证、参数验证、异常处理等，但对于Web应用而言，并不希望接触到这么多细节性的处理，因此引入中间件来简化和隔离这些基础设施与业务逻辑之间的细节，让开发者能够关注在业务的开发上，以达到提升开发效率的目的</p><h3 id="node-js-中-reuquire（‘xxx’）从哪里导入"><a href="#node-js-中-reuquire（‘xxx’）从哪里导入" class="headerlink" title="node.js 中 reuquire（‘xxx’）从哪里导入"></a>node.js 中 reuquire（‘xxx’）从哪里导入</h3><p>require函数可以导入模块、JSON文件、本地文件。模块可以通过一个相对路径从node_modules、本地模块、JSON文件中导出，该路径将针对__dirname变量（如果已定义）或者当前工作目录。</p><h3 id="node-js-中的事件循环和浏览器事件循环区别"><a href="#node-js-中的事件循环和浏览器事件循环区别" class="headerlink" title="node.js 中的事件循环和浏览器事件循环区别"></a>node.js 中的事件循环和浏览器事件循环区别</h3><p>1，任务队列</p><p>浏览器环境下的 <strong>异步任务</strong> 分为 <strong>宏任务(macroTask)</strong> 和 **微任务(microTask)**：</p><ul><li>**宏任务(macroTask)**：script 中代码、setTimeout、setInterval、I&#x2F;O、UI render；</li><li>**微任务(microTask)**： Promise、Object.observe、MutationObserver。</li></ul><p>当满足执行条件时，<strong>宏任务(macroTask)</strong> 和 <strong>微任务(microTask)</strong> 会各自被放入对应的队列：<strong>宏队列(Macrotask Queue)</strong> 和 <strong>微队列(Microtask Queue)</strong> 中等待执行。</p><p>在 Node 环境中 <strong>任务类型</strong> 相对就比浏览器环境下要复杂一些：</p><ul><li><strong>microTask</strong>：微任务；</li><li><strong>nextTick</strong>：process.nextTick；</li><li><strong>timers</strong>：执行满足条件的 setTimeout 、setInterval 回调；</li><li><strong>I&#x2F;O callbacks</strong>：是否有已完成的 I&#x2F;O 操作的回调函数，来自上一轮的 poll 残留；</li><li><strong>poll</strong>：等待还没完成的 I&#x2F;O 事件，会因 <strong>timers</strong> 和超时时间等结束等待；</li><li><strong>check</strong>：执行 setImmediate 的回调；</li><li><strong>close callbacks</strong>：关闭所有的 closing handles ，一些 onclose 事件；</li><li>idle&#x2F;prepare 等等：可忽略。</li></ul><p>因此，也就产生了执行事件循环相应的任务队列 <strong>Timers Queue</strong>、<strong>I&#x2F;O Queue</strong>、<strong>Check Queue</strong> 和 <strong>Close Queue</strong>。</p><ol start="2"><li><p>执行过程</p><p>浏览器中</p></li><li><p>执行完主执行线程中的任务；</p></li><li><p>取出 <strong>Microtask Queue</strong> 中任务执行直到清空；</p></li><li><p>取出 <strong>Macrotask Queue</strong> 中一个任务执行；</p></li></ol><p>node</p><ul><li>同步任务；</li><li>发出异步请求；</li><li>规划定时器生效的时间；</li><li>执行process.nextTick()。</li><li>清空当前循环内的 <strong>Timers Queue</strong>，清空 <strong>NextTick Queue</strong>，清空 <strong>Microtask Queue</strong>；</li><li>清空当前循环内的 <strong>I&#x2F;O Queue</strong>，清空 <strong>NextTick Queue</strong>，清空 <strong>Microtask Queue</strong>；</li><li>清空当前循环内的 <strong>Check Queue</strong>，清空 <strong>NextTick Queue</strong>，清空 <strong>Microtask Queue</strong>；</li><li>清空当前循环内的 <strong>Close Queue</strong>，清空 <strong>NextTick Queue</strong>，清空 <strong>Microtask Queue</strong>；</li><li>进入下轮循环。</li></ul><h3 id="require-的模块加载机制"><a href="#require-的模块加载机制" class="headerlink" title="require 的模块加载机制"></a>require 的模块加载机制</h3><ol><li>计算模块绝对路径；</li><li>如果缓存中有该模块，则从缓存中取出该模块；</li><li>按优先级依次寻找并编译执行模块，将模块推入缓存（require.cache）中；</li><li>输出模块的exports属性；</li></ol><h3 id="内存泄漏问题："><a href="#内存泄漏问题：" class="headerlink" title="内存泄漏问题："></a>内存泄漏问题：</h3><ol><li>全局变量：全局变量挂在 root 对象上，不会被清除掉；</li><li>闭包：如果闭包未释放，就会导致内存泄露；</li><li>事件监听：对同一个事件重复监听，忘记移除（removeListener），将造成内存泄露。</li></ol><p>守护进程：</p><p>守护进程是不依赖终端（tty）的进程，不会因为用户退出终端而停止运行的进程。</p><ol><li>创建一个进程 A；</li><li>在进程 A 中创建进程 B，可以使用child_process.fork或者其他方法；</li><li>启动子进程时，设置detached属性为 true，保证子进程在父进程退出后继续运行；</li><li>进程 A 退出，进程 B 由 init 进程接管。此时进程 B 为守护进</li></ol><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>Babel 就是一个编译器</p><p> 1.解析：将源代码转化为字符流源代码</p><h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><h3 id="小程序是单页面应用吗？"><a href="#小程序是单页面应用吗？" class="headerlink" title="小程序是单页面应用吗？"></a>小程序是单页面应用吗？</h3><p>是，通过路由跳转实现</p><h3 id="小程序的开发，是如何请求数据的？"><a href="#小程序的开发，是如何请求数据的？" class="headerlink" title="小程序的开发，是如何请求数据的？"></a>小程序的开发，是如何请求数据的？</h3><p>服务器域名在：小程序后台&#x3D;&gt; 开发&#x3D;&gt; 开发设置 &#x3D;&gt; 服务器域名中配置，配置时需注意：</p><p>1）域名只支持https（request, uploadFile，downloadFile）和wss（connectSocket）协议。</p><p>2）域名不能使用ip地址或localhost。</p><p>3）域名必须经过ICP备案。</p><p>4）服务器域名一个月内可申请5次修改。</p><h3 id="小程序的包括的四种类型的网络请求？"><a href="#小程序的包括的四种类型的网络请求？" class="headerlink" title="小程序的包括的四种类型的网络请求？"></a>小程序的包括的四种类型的网络请求？</h3><ol><li>常规 https (wx.request)</li><li>上传文件（wx.uploadFile）</li><li>下载文件 （wx.downloadFile）</li><li>websocket 通信（wx.connectSocket）</li></ol><h3 id="小程序不存在跨域问题"><a href="#小程序不存在跨域问题" class="headerlink" title="小程序不存在跨域问题"></a>小程序不存在跨域问题</h3><h3 id="小程序中数据如何同步渲染"><a href="#小程序中数据如何同步渲染" class="headerlink" title="小程序中数据如何同步渲染"></a>小程序中数据如何同步渲染</h3><p>使用 setData 进行同步渲染</p><p>小程序分为逻辑层和渲染层，渲染层和逻辑层由两个线程管理 逻辑层采用JSCore运行 JS脚本 ，渲染层的界面使用了 WebView 进行渲染。小程序存在多个界面，因此渲染层存在多个WebView 线程。 这两个线程会经过 微信客户端Native做中转。</p><p>尽量不要重复 setData，以减少数据的传输量，数据传输一次就是js 代码执行一次，当数据量过大时会增加脚本的编译时间</p><h3 id="微信小程序组件的生命周期"><a href="#微信小程序组件的生命周期" class="headerlink" title="微信小程序组件的生命周期"></a>微信小程序组件的生命周期</h3><p>组件的生命周期：</p><p>created attached detached，包含一个组件实例</p><p>1 组件创建后之后，created 生命周期触发。此时，组件数据 this.data 就是在 Component 构造器中定义的 data。此时还不能使用 setData，只应该用于组件 this 添加 一些自定义属性字段</p><p>2在组件初始化完毕，进入页面节点树 attched 生命周期被触发，this.data 已经被初始化为组件的当前值</p><p>3 在组件离开页面节点的时候detached 的生命周期被触发</p><p>生命周期如下表所示</p><table><thead><tr><th>生命周期</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>created</td><td>无</td><td>在组件实例刚刚被创建时执行</td></tr><tr><td>attached</td><td>无</td><td>在组件实例进入页面节点树时执行</td></tr><tr><td>ready</td><td>无</td><td>在组件在视图层布局完成后执行</td></tr><tr><td>moved</td><td>无</td><td>在组件实例被移动到节点树另一个位置时执行</td></tr><tr><td>detached</td><td>无</td><td>在组件实例被从页面节点树移除时执行</td></tr><tr><td>error</td><td>Object Error</td><td>每当组件方法抛出错误时执行</td></tr></tbody></table><h3 id="小程序的单位-rpx"><a href="#小程序的单位-rpx" class="headerlink" title="小程序的单位 rpx"></a>小程序的单位 rpx</h3><p>rpx 是小程序 独有的屏幕自适应的尺寸</p><p>不论屏幕多大都可以通过 rpx 这个单位进行自适应  ，小程序的宽度无论如何都是750rpx</p><p>​rpx 和 px之间的换算</p><ul><li>​在普通网页开发中，最常用的像素单位是px </li><li>​在小程序开发中，推荐使用rpx这种响应式的像素单位进行开发 </li><li>​以 iPhone6 为例，iPhone6 的屏幕宽度为 375px，共有 750个物理像素，则 750rpx &#x3D; 375px &#x3D; 750 物理像素 </li><li>​得出公式：<strong>1 rpx &#x3D; 0.5 px &#x3D; 1 物理像素</strong> </li><li>​举个例子：在iPhone6上，如果要绘制一个宽为100px，高为30px的盒子，换算成rpx单位，宽高分别为200rpx 和 60rpx</li></ul><h3 id="小程序与vue-的区别"><a href="#小程序与vue-的区别" class="headerlink" title="小程序与vue 的区别"></a>小程序与vue 的区别</h3><p>1，小程序的生命周期更加简单</p><p>2，微信小程序数据绑定和 vue不同</p><p>3，控制元素的显示和隐藏的 wx-if  hidden</p><p>4，事件处理不同，小程序中 用bindtap ，或者是catchtap</p><p>5，数据双向绑定的方法也不一样， 微信小程序是通过setData 修改data的数据</p><h3 id="小程序的原理"><a href="#小程序的原理" class="headerlink" title="小程序的原理"></a>小程序的原理</h3><p>小程序采用的是 javaScript 、wxml、wxss 三种技术进行开发，本质也是spa，可使用微信的原生接口</p><p>小程序是数据与视图分离的，所有的页面更新都要通过数据实现</p><p>小程序分为 webview 和 appService 两个部分 appservice 负责处理逻辑数据层，两个线程运行中通过JSbridge 通讯</p><h3 id="bindtap-与catchtap的区别"><a href="#bindtap-与catchtap的区别" class="headerlink" title="bindtap 与catchtap的区别"></a>bindtap 与catchtap的区别</h3><p>​相同点：首先他们都是作为点击事件函数，就是点击时触发。在这个作用上他们是一样的，可以不做区分</p><p>​不同点：他们的不同点主要是bindtap是不会阻止冒泡事件的，catchtap是阻止冒泡的</p><h3 id="小程序的-wxml-与标准的-html-的异同"><a href="#小程序的-wxml-与标准的-html-的异同" class="headerlink" title="小程序的 wxml 与标准的 html 的异同"></a>小程序的 wxml 与标准的 html 的异同</h3><p>相同：都是用来描述页面结构的，都是由标签属性构成</p><p>不同：</p><p>1标签名字不同 2 标签属性不同</p><p> 3 wxml 只能在开发者工具中使用 </p><p>4组件封装不同，wxml对组件进行重新封装</p><p>5 小程序运行在jscore 里面没有 Dom树 和 window 对象</p><h3 id="小程序三种事件对象的属性列表"><a href="#小程序三种事件对象的属性列表" class="headerlink" title="小程序三种事件对象的属性列表"></a>小程序三种事件对象的属性列表</h3><p>基础事件：</p><p>   type：事件类型</p><p>  timeStamp：事件生产时的时间戳</p><p> target ：触发事件的组件的属性值集合</p><p>currentTarget：当前组件的一些属性集合 </p><p>自适应事件</p><p>  detail</p><p>触摸事件（TouchEvent）</p><p>   touches </p><p>   changedTouches </p><p>微信小程序的优劣势？</p><p>优势：</p><ol><li><p>无需下载，通过搜索和扫一扫可以打开</p></li><li><p>良好的用户体验</p></li><li><p>开发成本比App 要低</p></li><li><p>可以添加到桌面</p></li><li><p>有一定的小程序审查机制</p><p>劣势：</p><p>限制比较多页面大小 不超过1m，不能打开超过5个层级</p><p>依托于微信，无法开发后台管理系统</p><p>推广面比较窄</p></li></ol><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><h3 id="注册登录业务的实现"><a href="#注册登录业务的实现" class="headerlink" title="注册登录业务的实现"></a>注册登录业务的实现</h3><ol><li>cookie +Session 登录</li><li>Token 登录</li><li>SSO 登录 </li><li>OAuth 登录</li></ol><h4 id="Cookie-登录的实现"><a href="#Cookie-登录的实现" class="headerlink" title="Cookie 登录的实现"></a>Cookie 登录的实现</h4><p> 1.用户登录 页面输入密码</p><ol start="2"><li><p>服务器验证密码无误之后会创建 Sessionid 用于验证</p></li><li><p>服务的端响应这个 http 请求之后，通过set-Cookie 将session 写入 Cookie 中</p></li><li><p>后序的请求都是 请求中携带cookie 信息进行的 </p><p>由于要对接大量的客户端，也就需要存放大量的SessionId，这样服务器的压力变大</p><p>服务器是一个集群，为了同步登录，sessionId 需要同步没有个机器</p><p>由于SessionId 存在 Cookie，无法csrf</p></li></ol><h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><ol><li>用户输入账号密码 发送请求</li><li>服务端生成token 发送给客户端</li><li>客户端保存token 用户带着 token进行验证</li><li>服务端验证token</li></ol><p>token存在客户端 节省服务器的资源</p><p>拓展：token 是如何生效的？</p><p>最常见的是使用 JWT（json web Token）生成 JWT 主要主要分为3个部分 ：header（头信息），playload（消息体），signature（签名）</p><h4 id="SSO-单点登录"><a href="#SSO-单点登录" class="headerlink" title="SSO 单点登录"></a>SSO 单点登录</h4><p>单点登录就是在公司内部搭建一个公共的认证中心</p><p>1.没有登录的时候会重定向到认证中心（另外的页面）进行验证</p><p>2.验证密码之后重定向到 访问页面下并且携带 授权码ticke，并且认证认证中心写入Cookie 的登录态</p><p>3.目标页面到认证中心验证 ticket </p><p>4验证好获得 目标页面的cookie </p><p>5再次登录的时候只需要验证目标页面的cookie 就行</p><h4 id="SSO单点退出"><a href="#SSO单点退出" class="headerlink" title="SSO单点退出"></a>SSO单点退出</h4><p>1.清空目标页面的Cookie</p><p>2.重定向认证中心的退出api</p><h4 id="OAuh-第三方登录"><a href="#OAuh-第三方登录" class="headerlink" title="OAuh 第三方登录"></a>OAuh 第三方登录</h4><p>以微信登录为例</p><p>1,开发网站的时候需要在微信开发平台注册账号，并使用微信登录功能</p><p>2，申请之后会得到 appid、appsecret</p><p>开始登录</p><p>1.第三方应用会向微信开发平台发送 OAuth 授权登录</p><p>2.用户输入微信的密码和账号</p><p>3.微信会根据拉起a.com?code&#x3D;123，这时带上了一个临时票据 code</p><ol start="4"><li>获取临时的code之后就要会拿着 appi，appsecret code 向微信服务器申请token</li><li>拿到tokken  目标就可以拿到用户的信息</li><li>目标网站将 token  写入Cookie</li></ol><h3 id="懒加载技术实现"><a href="#懒加载技术实现" class="headerlink" title="懒加载技术实现"></a>懒加载技术实现</h3><p>为什么要进行懒加载？<br>1.节省网络流量</p><p>2.缩短页面加载时间</p><h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><p>使用 <em>intersection observer</em></p><p>设置标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">src</span>=<span class="string">&quot;placeholder-image.jpg&quot;</span> <span class="attr">data-src</span>=<span class="string">&quot;image-to-lazy-load-1x.jpg&quot;</span> <span class="attr">data-srcset</span>=<span class="string">&quot;image-to-lazy-load-2x.jpg 2x, image-to-lazy-load-1x.jpg 1x&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;I&#x27;m an image!&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lazyImages = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img.lazy&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;IntersectionObserver&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lazyImageObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="keyword">function</span>(<span class="params">entries, observer</span>) &#123;</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> lazyImage = entry.<span class="property">target</span>;</span><br><span class="line">          lazyImage.<span class="property">src</span> = lazyImage.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">          lazyImage.<span class="property">srcset</span> = lazyImage.<span class="property">dataset</span>.<span class="property">srcset</span>;</span><br><span class="line">          lazyImage.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;lazy&quot;</span>);</span><br><span class="line">          lazyImageObserver.<span class="title function_">unobserve</span>(lazyImage);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    lazyImages.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">lazyImage</span>) &#123;</span><br><span class="line">      lazyImageObserver.<span class="title function_">observe</span>(lazyImage);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Possibly fall back to a more compatible method here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>   class：用于在JavaScript中关联元素 </p><p>​src属性：指向了一张占位图片，图片在页面的第一次加载会显现 </p><p>​data-src和data-srcset属性：这是占位属性，里面放的是目标图片的url</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lazyImages = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;img.lazy&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;IntersectionObserver&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lazyImageObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="keyword">function</span>(<span class="params">entries, observer</span>) &#123;</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> lazyImage = entry.<span class="property">target</span>;</span><br><span class="line">          lazyImage.<span class="property">src</span> = lazyImage.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">          lazyImage.<span class="property">srcset</span> = lazyImage.<span class="property">dataset</span>.<span class="property">srcset</span>;</span><br><span class="line">          lazyImage.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;lazy&quot;</span>);</span><br><span class="line">          lazyImageObserver.<span class="title function_">unobserve</span>(lazyImage);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    lazyImages.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">lazyImage</span>) &#123;</span><br><span class="line">      lazyImageObserver.<span class="title function_">observe</span>(lazyImage);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Possibly fall back to a more compatible method here</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用css 加载 ，这个行为可用于延迟CSS图片资源的加载，思路是通过JavaScript检测到元素处于视窗中时，加一个class类名，这个class就引用了外部图片资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lazy-background&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here&#x27;s a hero heading to get your attention!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s hero copy to convince you to buy a thing!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/buy-a-thing&quot;</span>&gt;</span>Buy a thing!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.lazy-background</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;hero-placeholder.jpg&quot;</span>); <span class="comment">/* 占位图片 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.lazy-background</span><span class="selector-class">.visible</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;hero.jpg&quot;</span>); <span class="comment">/* 真正的图片 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用js检测元素是否在视窗内，在视窗内就会加上一个 .visble 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lazyBackgrounds = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.lazy-background&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;IntersectionObserver&quot;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lazyBackgroundObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="keyword">function</span>(<span class="params">entries, observer</span>) &#123;</span><br><span class="line">      entries.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">          entry.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;visible&quot;</span>);</span><br><span class="line">          lazyBackgroundObserver.<span class="title function_">unobserve</span>(entry.<span class="property">target</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    lazyBackgrounds.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">lazyBackground</span>) &#123;</span><br><span class="line">      lazyBackgroundObserver.<span class="title function_">observe</span>(lazyBackground);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Vue-lazyloader"><a href="#Vue-lazyloader" class="headerlink" title="Vue lazyloader"></a>Vue lazyloader</h4><p>安装插件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> npm i vue<span class="literal">-lazyload</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure><p>引用插件 main.js 设置懒加载前的图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueLazyload</span> <span class="keyword">from</span> <span class="string">&#x27;vue-lazyload&#x27;</span>  <span class="comment">//引入这个懒加载插件</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueLazyLoad</span>, &#123;</span><br><span class="line">  <span class="attr">preLoad</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="built_in">require</span>(<span class="string">&#x27;./assets/img/error.jpg&#x27;</span>),</span><br><span class="line">  <span class="attr">loading</span>: <span class="built_in">require</span>(<span class="string">&#x27;./assets/img/homePage_top.jpg&#x27;</span>),</span><br><span class="line">  <span class="attr">attempt</span>: <span class="number">2</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在入口文件添加后，在组件任何地方都可以直接使用把 img 里的:src -&gt; v-lazy  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in imgList&quot;</span> <span class="attr">v-lazy:background-image</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用视频模拟GIF</p><p>GIF 很多地方都不及视频，特别是文件大小。</p><h4 id="PNG-图片的压缩算法"><a href="#PNG-图片的压缩算法" class="headerlink" title="PNG 图片的压缩算法"></a>PNG 图片的压缩算法</h4><p>预解析：这个阶段就是堆PNG图片进行一个预处理方</p><p>压缩：执行Deflate 压缩算法</p><p>通常使用将图片转化为base64 进行传递数据，优化数据的传递</p><h3 id="二维码登录"><a href="#二维码登录" class="headerlink" title="二维码登录"></a>二维码登录</h3><p> 二维码通常可以用QR码，移动端基于token 的技术，在登录的时候不仅会传入 账号密码还会传入设备信息</p><p>底层机制</p><p>1，设备与账号关联起来</p><p>2，服务器返回token</p><p>3，请求接口时携带token进行请求</p><h3 id="扫描pc-端的登录"><a href="#扫描pc-端的登录" class="headerlink" title="扫描pc 端的登录"></a>扫描pc 端的登录</h3><p>等待扫描阶段：</p><p>1.pc端发出二维码请求，服务端返回二维码ID</p><p>2.pc端展示二维码，轮询二维码状态直到登录成功（太长时间没有扫会导致二维码失效）</p><p>3，扫描二维码的ID ，手机会将手机信息，二维码信息发送给服务端</p><p>等待确定</p><p>4，返回临时token给手机端 pc端轮询二维码状态（等待确定），手机端携带临时token，确定登录</p><p>5，更改二维码状态为已确定，生成pc端的token</p><p>确定后</p><p>6，pc轮询二维码的状态，服务器返回二维码和pc 的token</p><p>7，pc 通过token 继续访问</p><h3 id="数据展示优化"><a href="#数据展示优化" class="headerlink" title="数据展示优化"></a>数据展示优化</h3><p>1，减少http请求</p><p>2，使用http2：解析速度快，多路复用，优先级高</p><p>3，使用服务端渲染：首屏渲染快，SEO好</p><p>4，静态资源使用CDN 部署，分布式服务器的部署</p><p>5，css 放头部，js文件放尾部</p><p>6，使用iconfont 代替部分图片</p><p>7，尽量使用缓存</p><p>8，压缩文件来减少文件下载时间</p><p>9，图片优化</p><ol><li>图片延迟加载</li><li>响应式图片</li><li>调整图片大小</li><li>降低图片质量</li><li>尽可能利用 CSS3 效果代替图片</li><li>使用 webp 格式的图片</li></ol><p>10，按需加载代码和使用第三方库</p><p>11，减少重排重绘</p><h3 id="静态代码扫描"><a href="#静态代码扫描" class="headerlink" title="静态代码扫描"></a>静态代码扫描</h3><p>1.开发过程中，发现bug越晚成本就越大</p><p>2，缺陷引入的大部分在编码阶段，但发现更多是在单元测试、集成测试</p><h3 id="静态代码分析"><a href="#静态代码分析" class="headerlink" title="静态代码分析"></a>静态代码分析</h3><ul><li>缺陷模式匹配<br>事先从代码分析经验中收集足够多的共性缺陷模式，将待分析代码与已有的共性缺陷模式进行匹配，从而完成软件安全分析。优点：简单方便；缺点：需要内置足够多的缺陷模式，容易产生误报。</li><li>类型推断&#x2F;类型推断<br>类型推断技术是指通过对代码中运算对象类型进行推理，从而保证代码中每条语句都针对正确的类型执行。</li><li>模型检查<br>建立于有限状态自动机的概念基础上。将每条语句产生的影响抽象为有限状态自动机的一个状态，再通过分析有限状态机达到分析代码目的。<br>校验程序并发等时序特性。</li><li>数据流分析<br>从程序代码中收集程序语义信息，抽象成控制流图，可以通过控制流图，不必真实的运行程序，可以分析发现程序运行时的行为</li></ul><h3 id="需要写-foo-函数，这个函数返回首次调用-Data-对象"><a href="#需要写-foo-函数，这个函数返回首次调用-Data-对象" class="headerlink" title="需要写 foo 函数，这个函数返回首次调用 Data 对象"></a>需要写 foo 函数，这个函数返回首次调用 Data 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t) <span class="keyword">return</span> t;</span><br><span class="line">        t = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="生成图片"><a href="#生成图片" class="headerlink" title="生成图片"></a>生成图片</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> <span class="string">&#x27;html2canvas&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">html2canvas</span>(<span class="variable language_">document</span>.<span class="property">body</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">canvas</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(canvas);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="生成-QRCode-生成二维码"><a href="#生成-QRCode-生成二维码" class="headerlink" title="生成 QRCode 生成二维码"></a>生成 QRCode 生成二维码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">QRCode</span> <span class="keyword">from</span> <span class="string">&#x27;qrcode&#x27;</span>;</span><br><span class="line"><span class="comment">// 使用 async 生成图片</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span><br><span class="line"><span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title class_">QRCode</span>.<span class="title function_">toDataURL</span>(url, options))</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>它定义了对象之间的一种一对多的依赖关系，所有依赖于它的对象得到通知会被自动更新，解决主体对象与观察者之间的 耦合，一个对象状态改变和其他对象通知的问题</p><h4 id="设计模式-1"><a href="#设计模式-1" class="headerlink" title="设计模式"></a>设计模式</h4><p>设计模式是一套被反复使用，经过分类编目的代码设计经验</p><ul><li>单体模式：单体是一个用来划分命名空间并将一批相关的属性和方法组织在一起的对象，如果他可以被实例化，那么他只能被实例化一次。</li><li>工厂模式:提供创建对象的接口，意思就是根据领导（调用者）的指示（参数），生产相应的产品（对象）</li><li>单例模式：单例模式定义了一个对象的创建过程，此对象只有一个单独的实例，并提供一个访问它的全局访问点。也可以说单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。</li><li>观察者模式（发布订阅模式）： 定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新，也被称为是发布订阅模式。</li><li>策略模式：策略模式指的是定义一些列的算法，把他们一个个封装起来，目的就是将算法的使用与算法的实现分离开来。说白了就是以前要很多判断的写法，现在把判断里面的内容抽离开来，变成一个个小的个体</li><li>模板模式：定义了一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 通俗的讲，就是将一些公共方法封装到父类，子类可以继承这个父类，并且可以在子类中重写父类的方法，从而实现自己的业务逻辑</li><li>代理模式：代理模式的中文含义就是帮别人做事，javascript的解释为：把对一个对象的访问, 交给另一个代理对象来操作.</li><li>外观模式： 外观模式是很常见。其实它就是通过编写一个单独的函数，来简化对一个或多个更大型的，可能更为复杂的函数的访问。也就是说可以视外观模式为一种简化某些内容的手段</li></ul><h2 id="前端安全问题"><a href="#前端安全问题" class="headerlink" title="前端安全问题"></a>前端安全问题</h2><p>​    前端常见的安全问题：</p><p>  1.iframe</p><p> 2.opener</p><p> 3.CSRF（跨站请求伪造）</p><p> 4.clickJacking (点击劫持)</p><p>5.HSTS（http严格传输安全）</p><p>6.CND劫持</p><h2 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h2><p>主要设置配置各种信息：</p><p>1.header里面通过 script 引入Echarts js</p><p>2.初始echart 实例</p><p>3.设置Option </p><p>4设置使用setoption生成图表显示图表：myChart.setOption(option);</p><h2 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h2><h4 id="Gulp-和-webpack-的区别"><a href="#Gulp-和-webpack-的区别" class="headerlink" title="Gulp 和 webpack 的区别"></a>Gulp 和 webpack 的区别</h4><p>Gulp是一个自动化构建<strong>工具</strong>，强调的是前端开发的流程，通过配置一系列的task，定义task处理的事物，然后定义执行顺序，来让Gulp执行task，从而构建前端项目的流程，说白了就是用来打包项目。（单纯用来打包的，关键是任务化）</p><p>webpack 是一个前端模块化方案，侧重于模块化打包，把开发中的所有资源（图片、js文件、css文件等）都看成模块</p><p>共同点：都是进行文件压缩和合并</p><p>不同点：</p><ul><li>Gulp是构建工具，可以配合各种插件做css.压缩等，解放了双手，实现了自动化。</li><li>Gulp严格上讲，它旨在规范前端开发流程，不包括模块化功能。</li><li>WebPack是文件打包工具，可把各个项目的css.压缩文件等打包合并成一个或多个文件，主要就是应用于模块化操作。</li><li>WebPack更是明显强调模块化开发，而那些文件压缩合并、预处理等功能，只是他附带的功能。</li><li>WebPack整合了Gulp的优点，当我们想要一步一步来配置自己的环境时，那么gulp就可以满足我们的需要，但是如果我们想一下就配备大部分我们所需要的环境，那么此时可以选用WebPack，前提是写好package.json。</li><li>gulp与webpack上是互补的，还是可替换的，取决于你项目的需求，它们可不存在冲突的关系哈。</li><li>Gulp与WebPack可以组合起来使用，以便快速编译（依靠Gulp丰富的组件可以让JS与HTML实现联动，从而控制WebPack应用程序，达到高自动化）</li></ul><h4 id="webpack的打包流程"><a href="#webpack的打包流程" class="headerlink" title="webpack的打包流程"></a>webpack的打包流程</h4><ol><li>初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler。</li><li>编译：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理。</li><li>输出：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统。</li><li>文件发生变化之后就重复2,3过程</li></ol><h2 id="笔试算法题"><a href="#笔试算法题" class="headerlink" title="笔试算法题"></a>笔试算法题</h2><p>使用 ACM 输入模式的java 常用操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> (System.in);</span><br><span class="line"><span class="comment">//读取一个整数</span></span><br><span class="line"><span class="type">int</span> n= sc.nextInt();</span><br><span class="line">String s=sc.next();</span><br><span class="line"><span class="type">double</span> t=sc.nextLine();</span><br><span class="line"><span class="comment">// 判断 是否sc.hasNext(),sc.hasNextInt()或</span></span><br><span class="line"><span class="comment">// sc.hasNextDouble()或sc.hasNextLine()</span></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.print();</span><br><span class="line">System.out.printf();</span><br><span class="line"><span class="comment">//字符串处理</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>; <span class="comment">// a.charAt(1) = &#x27;e&#x27;</span></span><br><span class="line">System.out.println(a.substring(<span class="number">0</span>, <span class="number">4</span>)) <span class="comment">// output &quot;Hell&quot;</span></span><br><span class="line"><span class="comment">//字符串拼接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">System.out.println(a + <span class="string">&quot;, &quot;</span> + b + <span class="string">&quot;!&quot;</span>); <span class="comment">// output &quot;Hello, world!&quot;</span></span><br><span class="line"><span class="comment">//进制转化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">st</span> <span class="operator">=</span> Integer.toString(num, base);</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(st, base);</span><br><span class="line"><span class="comment">// 针对多个case</span></span><br><span class="line"><span class="keyword">while</span> (sc.hasNextInt()) &#123; <span class="comment">// 注意 while 处理多个 case当有多行输入可以进处理 一个while表示一个输入行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>多行输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kiri.test;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 况志勤</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()&amp;&amp;!flag) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span>in.nextInt();</span><br><span class="line">            <span class="type">int</span> []arr=<span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                    arr[i]=in.nextInt();</span><br><span class="line">                    sum+=arr[i];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                flag=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(money);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q1-股票最大收益-一次交易"><a href="#Q1-股票最大收益-一次交易" class="headerlink" title="Q1 股票最大收益(一次交易)"></a>Q1 股票最大收益(一次交易)</h3><p>有一个数组，其中第i个元素在第i天的价格</p><p>只有买入股票以后才能卖出，获得最大收益</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>  <span class="title function_">Solution</span> <span class="params">(<span class="type">int</span>[]price)</span>&#123;</span><br><span class="line">        <span class="comment">// 变量每一个元素找到之前的最小数</span></span><br><span class="line">        <span class="comment">// 储存差值</span></span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> minn=price[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;price.length;i++)&#123;</span><br><span class="line">            minn=Math.min(minn,price[i])</span><br><span class="line">            ans=Math.max(ans,price[i]-min)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Q2-反转字符串"><a href="#Q2-反转字符串" class="headerlink" title="Q2 反转字符串"></a>Q2 反转字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">solve</span><span class="params">(String str)</span>&#123;</span><br><span class="line">            <span class="comment">//将字符串变为一个数组</span></span><br><span class="line">            <span class="type">char</span>[] ans=str.toCharArray();</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span>str.length();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                ans[i]=str.charAt[len-<span class="number">1</span>-i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(ans);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q3-矩阵乘法"><a href="#Q3-矩阵乘法" class="headerlink" title="Q3 矩阵乘法"></a>Q3 矩阵乘法</h3><p>遍历每一层循环，每一个位置都要计算一次结果，需要两层循环进行来控制，对于每个位置循环p次做加法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] matrix(<span class="type">int</span> a[][],<span class="type">int</span> b[][])&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>].length!=b.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x=a.length; <span class="comment">//A矩阵的行数，B矩阵列数</span></span><br><span class="line">        <span class="type">int</span> y=b[<span class="number">0</span>].length;<span class="comment">//B矩阵列数</span></span><br><span class="line">        <span class="type">int</span> z=b.length;</span><br><span class="line">        <span class="type">int</span> c[][]=<span class="keyword">new</span>  <span class="title class_">int</span>[x][y];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;y;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;z;k++)&#123;</span><br><span class="line">                    c[i][j]+=a[i][k]*b[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q4最小路径和"><a href="#Q4最小路径和" class="headerlink" title="Q4最小路径和"></a>Q4最小路径和</h3><p>从左上角走的右下角 规定只能向下和向右走，求出最小路径和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] matrix)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span>matrix.length; <span class="comment">// 矩阵的行</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span>matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="comment">// 先计算出第一行与第一列的路径值，在右方向和下方向上的路径值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;matrix[i][<span class="number">0</span>]=matrix[i-<span class="number">1</span>][<span class="number">0</span>]+matrix[i][<span class="number">0</span>]&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;j++)&#123;matrix[<span class="number">0</span>][j]=matrix[<span class="number">0</span>][j-<span class="number">1</span>]+matrix[<span class="number">0</span>][j]&#125;</span><br><span class="line">    <span class="comment">// 遍历计算出其他方路径的值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">           <span class="comment">// 选出左右方向中最小路径再加上本路径</span></span><br><span class="line">            matrix[i][j]=Math.min(matrix[i-<span class="number">1</span>][j],matrix[i][j-<span class="number">1</span>])+matrix[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix[n-<span class="number">1</span>][m-<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q5-判断回文"><a href="#Q5-判断回文" class="headerlink" title="Q5 判断回文"></a>Q5 判断回文</h3><p>回文字符串，正序和反序都一样,使用字符串的charAt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judge</span> <span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">int</span> len= str.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(str.charAt(i)!=str.charAt(len-<span class="number">1</span>-i))&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q6-合并两个有序数组"><a href="#Q6-合并两个有序数组" class="headerlink" title="Q6 合并两个有序数组"></a>Q6 合并两个有序数组</h3><p>给出两个有序整数数组 A和B ，将数组B合并到数组A中变成一个有序数组,假设 A数组中有足够的空间存放B 的元素</p><p>A 和B 的数目分别为m 和n  就是逐个比大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> m,<span class="type">int</span> B[], <span class="type">int</span> n)</span>&#123;</span><br><span class="line">       <span class="type">int</span> a=n-<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> b=m-<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=m+n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">           <span class="keyword">if</span>(b&lt;<span class="number">0</span>||(a&gt;=<span class="number">0</span>&amp;&amp;A[a]&gt;=B[b]))&#123;</span><br><span class="line">               A[i]=A[a];</span><br><span class="line">               a--;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               A[i]=B[b];</span><br><span class="line">               b--;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q7-判断链表是否有环"><a href="#Q7-判断链表是否有环" class="headerlink" title="Q7 判断链表是否有环"></a>Q7 判断链表是否有环</h3><p>无环链表是 从一开始就会指向null  使用块指针和慢指针来判断 快指针和慢指针相遇就表示有环</p><p>快指针走两步，慢指针走一步 相遇就表示有环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span>  <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span>head;</span><br><span class="line">        ListNode slow=head;</span><br><span class="line">        <span class="keyword">while</span>(slow!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>&amp;&amp;fast.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast =fast.next.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q8-斐波那契数列"><a href="#Q8-斐波那契数列" class="headerlink" title="Q8 斐波那契数列"></a>Q8 斐波那契数列</h3><p>输入一个整数n输出 斐波那契数列的第n项；n&lt;&#x3D;39,可以使用递归算法（会出现重复递归），不过计算时间较长</p><p>使用记忆化搜索可以减少重复递归 先判断是否已经存在</p><p>使用矩阵快速幂的方法优化递推</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Fibonacci</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> f1=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> f2=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans=f1+f2;</span><br><span class="line">            f1=f2;</span><br><span class="line">            f2=ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>形如1, 1, 2, 3, 5, 8, 13, 21, 34, 55的数列，后一位是前面两位相加（斐波那契数列），写出函数要求找到第 N 位是多少，如：fib(3) &#x3D;&gt; 3 ， fib(5) &#x3D;&gt; 8, 要求时间复杂度为O(n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span> || num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> [] it = <span class="keyword">new</span> <span class="title class_">long</span> [<span class="number">1000</span>];</span><br><span class="line">        it[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        it[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= num; i++) &#123;</span><br><span class="line">            it[i] = it[i - <span class="number">1</span>] + it[i - <span class="number">2</span>];</span><br><span class="line">            result = it[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(fib(num));</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q9-二分查找"><a href="#Q9-二分查找" class="headerlink" title="Q9  二分查找"></a>Q9  二分查找</h3><p>请在有重复数字的升序数组中进行二分查找。输出在数组a中一个大于等于查找值v的位置，如果数组中不存在这样的数，数组长度加一 输出位置从</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>  <span class="title function_">upper</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> v, <span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span>n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">Mid</span> <span class="operator">=</span>left +(right-left)/<span class="number">2</span>; <span class="comment">// 防止溢出</span></span><br><span class="line">            <span class="keyword">if</span>(a[Mid]&gt;=v)&#123;</span><br><span class="line">                right =Mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left=Mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  right +1 是退回到相遇位置 +1 表示第三个</span></span><br><span class="line">        <span class="keyword">return</span>  right+<span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Q10-判断字符是否唯一"><a href="#Q10-判断字符是否唯一" class="headerlink" title="Q10 判断字符是否唯一"></a>Q10 判断字符是否唯一</h3><p>实现一个算法，确定一个字符串 <code>s</code> 的所有字符是否全都不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUnique</span><span class="params">(string astr)</span>&#123;</span><br><span class="line">        <span class="comment">// 建立一个hashset</span></span><br><span class="line">        Hash &lt;Charter&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c: astr.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.add(c))&#123;</span><br><span class="line">                <span class="comment">// 如果不能向hashset 里面加入字符说明就有重复字符</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q11-将罗马字符转化为整数"><a href="#Q11-将罗马字符转化为整数" class="headerlink" title="Q11 将罗马字符转化为整数"></a>Q11 将罗马字符转化为整数</h3><p>1，将罗马字符转化为 为7种基本符号,1建立一个map 变把基本字符存入</p><p>2，罗马数字拼接规则如果小字符在前面表示减去，小字符在后面表示加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    Map&lt;Character,Integer&gt; symbolValues = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character,Integer&gt;()&#123;&#123;</span><br><span class="line">        put(<span class="string">&#x27;I&#x27;</span>,<span class="number">1</span>);</span><br><span class="line">        put(<span class="string">&#x27;V&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">        put(<span class="string">&#x27;X&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">        put(<span class="string">&#x27;L&#x27;</span>,<span class="number">50</span>);</span><br><span class="line">        put(<span class="string">&#x27;C&#x27;</span>,<span class="number">100</span>);</span><br><span class="line">        put(<span class="string">&#x27;D&#x27;</span>,<span class="number">500</span>);</span><br><span class="line">        put(<span class="string">&#x27;M&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="comment">// 计算一个转化规则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">romanToInt</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span><span class="number">0</span>;<span class="comment">// 计算结果</span></span><br><span class="line">        <span class="type">int</span> n=s.length(); <span class="comment">//遍历字符串所有的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="comment">//逐个字符串中的字母进行查表</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span>symbolValues.get(s.charAt(i));</span><br><span class="line">            <span class="comment">//得到第一查表值</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt; n-<span class="number">1</span> &amp;&amp; value&lt;symbolValues.get(s.charAt(i+<span class="number">1</span>)))&#123;</span><br><span class="line">                ans -=value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans +=value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q12-分发饼干"><a href="#Q12-分发饼干" class="headerlink" title="Q12  分发饼干"></a>Q12  分发饼干</h3><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;&#x3D; g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: g = [1,2,3], s = [1,1]</span><br><span class="line">输出: 1</span><br><span class="line">思路分析： 使用贪心算法，对饼干和胃口进行排序，同时遍历这两个数组，当胃口大于饼干的时候扩大饼干大小，满足条件就</span><br><span class="line">增加数量</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span>&#123;</span><br><span class="line">         Arrays.sort(g);</span><br><span class="line">         Arrays.sort(s);</span><br><span class="line">          <span class="type">int</span> m=g.length;</span><br><span class="line">          <span class="type">int</span> n=s.length;</span><br><span class="line">          <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;m&amp;&amp;j&lt;n;i++,j++)&#123;</span><br><span class="line">             <span class="keyword">while</span>(j&lt;n &amp;&amp; g[i]&gt;s[j])&#123;</span><br><span class="line">                 j++;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span>(j&lt;n)&#123;</span><br><span class="line">                  count++;</span><br><span class="line">             &#125;</span><br><span class="line">            </span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q13-跳跃游戏"><a href="#Q13-跳跃游戏" class="headerlink" title="Q13 跳跃游戏"></a>Q13 跳跃游戏</h3><p>给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。</p><p>每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处:</p><p>0 &lt;&#x3D; j &lt;&#x3D; nums[i]<br>i + j &lt; n<br>返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。</p><p>题目思路： 数组里面的数相当于跳跃的体力值，跳跃一次可以跳多远，计算出跳到最后面的最小跳数。</p><p>分治思想： 初始目标为最后一个，遍历目标前面的数组，找出可以直达目标的坐标，并且设置为新的目标位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;<span class="comment">// 初始的目标位置是最后面一个</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">steps</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 记录跳数</span></span><br><span class="line">        <span class="keyword">while</span> (position &gt; <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position; i++) &#123;<span class="comment">//遍历每一个位置</span></span><br><span class="line">                <span class="keyword">if</span> (i + nums[i] &gt;= position) &#123;<span class="comment">//发现有一位置可以直达位置就将新的位置修改为该位置</span></span><br><span class="line">                    position = i; <span class="comment">//修改目标位置，修改位置之后就会跳出for循环重新遍历</span></span><br><span class="line">                    steps++; <span class="comment">//同时增加一步</span></span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-14岛屿问题"><a href="#Q-14岛屿问题" class="headerlink" title="Q 14岛屿问题"></a>Q 14岛屿问题</h3><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和&#x2F;或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>解题思路：主程序对每个位置进行遍历，如果遇到陆地就将陆地变成海洋，并且进行 dfs 深度优先遍历寻找相邻的陆地，同时变为海洋。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  </span><br><span class="line">       <span class="comment">//计算出岛屿的数量</span></span><br><span class="line">       <span class="comment">//设计一个主循环一个dfs   dfs的目的就是将与第一块陆地相邻的陆地变为海洋后面不再计算</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    <span class="comment">//如果出现陆地就搜索附近是否有相邻的陆地，相邻的陆地变为海洋</span></span><br><span class="line">                     </span><br><span class="line">                    dfs(grid, i, j);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//如果遇到边界或是海洋就返回</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span> || i &gt;= grid.length || j &gt;= grid[<span class="number">0</span>].length || grid[i][j] == <span class="string">&#x27;0&#x27;</span>)            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//先置0，之后再进行周围的探索</span></span><br><span class="line">        grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        dfs(grid, i + <span class="number">1</span>, j);</span><br><span class="line">        dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line">        dfs(grid, i - <span class="number">1</span>, j);</span><br><span class="line">        dfs(grid, i, j - <span class="number">1</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q15-供水器"><a href="#Q15-供水器" class="headerlink" title="Q15  供水器"></a>Q15  供水器</h3><p>冬季已经来临。 你的任务是设计一个有固定加热半径的供暖器向所有房屋供暖。</p><p>在加热器的加热半径范围内的每个房屋都可以获得供暖。</p><p>现在，给出位于一条水平线上的房屋 houses 和供暖器 heaters 的位置，请你找出并返回可以覆盖所有房屋的最小加热半径。</p><p>输入: houses &#x3D; [1,2,3], heaters &#x3D; [2]<br>输出: 1<br>解释: 仅在位置2上有一个供暖器。如果我们将加热半径设为1，那么所有房屋就都能得到供暖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRadius</span><span class="params">(<span class="type">int</span>[] houses, <span class="type">int</span>[] heaters)</span> &#123;</span><br><span class="line"><span class="comment">//问题的关键在于:对于单个房子，选离自己最近的供暖器；</span></span><br><span class="line"><span class="comment">//对于整体来说，要保证离供暖器最远的房子的需求也被满足</span></span><br><span class="line">    <span class="type">int</span> n=houses.length,m=heaters.length;<span class="comment">//获得两个数组的长度</span></span><br><span class="line">    <span class="type">int</span> [] dis=<span class="keyword">new</span> <span class="title class_">int</span> [n];<span class="comment">// 计算房子相距最近的热水器距离</span></span><br><span class="line">    <span class="comment">//两个遍历找出相距最近的</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;<span class="comment">//遍历房子</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;<span class="comment">//遍历热水器</span></span><br><span class="line">            min=Math.min(min,Math.abs(houses[i]-heaters[j]));</span><br><span class="line">        &#125;</span><br><span class="line">        dis[i]=min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(dis).max().getAsInt();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q16-代金劵组合问题"><a href="#Q16-代金劵组合问题" class="headerlink" title="Q16 代金劵组合问题"></a>Q16 代金劵组合问题</h3><p>聪明的小团想要用算法来帮助他快速计算：对于指定价格的商品，使用代金券凑出其价格即可，但所使用的代金券总面额不可超过商品价格。由于代金券数量有限，使用较少的代金券张数则可以实现价值最大化，即最佳优惠。  </p><p>  假设现有100元的商品，而代金券有50元、30元、20元、5元四种，则最佳优惠是两张50元面额的代金券；而如果现有65元的商品，则最佳优惠是两张30元代金券以及一张5元代金券。  </p><p>多组输入输出，读到s&#x3D;0时结束</p><p>输入可以有多个测试样例，每个测试由两行组成。</p><p>其中第一行包含一个整数P，表示商品的价格，1≤P≤10000；输入P为0时表示结束。</p><p>第二行包含若干整数，使用空格分割。其中第一个整数N（1≤N≤20）表示有多少种代金券，其后跟随M个整数，表示手中持有的代金券面额（1≤N≤1000），每种代金券数量不限。找到最少张数的代金券，使其面额恰好等于商品价格。输出所使用的代金券数量；如果有多个最优解，只输出其中一种即可；如果无解，则需输出“Impossible”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//输入</span><br><span class="line">65</span><br><span class="line">4 50 30 20 5</span><br><span class="line">0</span><br><span class="line">//输出</span><br><span class="line">3</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">    <span class="comment">// coins 是输入的代金劵，amount是总金额</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> amount + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, max);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; coins.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (coins[j] &lt;= i) &#123;</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] &gt; amount ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Q17-打印矩阵的问题"><a href="#Q17-打印矩阵的问题" class="headerlink" title="Q17 打印矩阵的问题"></a>Q17 打印矩阵的问题</h3><p>有一个二维数组 (n*n) ,写程序实现从右上角到左下角沿主对角线方向打印。（注：主对角线方向为从左上角指向右下角这一斜线的方向）给定一个二位数组 <strong>arr</strong> 及题目中的参数 <strong>n</strong> ，请返回结果数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] arrayPrint(<span class="type">int</span>[][] arr, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n * n];</span><br><span class="line">        <span class="comment">//建立一个结果输出数组，n 是维数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// j是列i是行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - j; i++) &#123;</span><br><span class="line">                <span class="comment">//两边同时进行赋值</span></span><br><span class="line">                res[index] = arr[i][j + i];</span><br><span class="line">                res[n * n - <span class="number">1</span> - index] = arr[n - <span class="number">1</span> - i][n - <span class="number">1</span> - j - i];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q18-吃鱼问题"><a href="#Q18-吃鱼问题" class="headerlink" title="Q18 吃鱼问题"></a>Q18 吃鱼问题</h3><p>小田非常喜欢吃鱼，特别喜欢煎着吃。有一天她抓到了 n 条鱼，她有一个煎锅，每次可以同时煎 m 条鱼。这个煎锅可以花一分钟的时间煎熟鱼的一面，当一条鱼的两面都煎熟了它就可以吃了。现在她想知道最少需要花多少时间能够把所有的鱼都煎熟。</p><p>思路：工作量 2*n 要么是 锅数的倍数，要么会有余数</p><p>有倍数的时候，要么是2 分钟以内 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> ((<span class="number">2</span>*n)%m == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Math.max(<span class="number">2</span>, <span class="number">2</span>*n/m));</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(Math.max(<span class="number">2</span>, <span class="number">2</span>*n/m + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q19-最多硬币兑换"><a href="#Q19-最多硬币兑换" class="headerlink" title="Q19 最多硬币兑换"></a>Q19 最多硬币兑换</h3><p>A 国一共发行了几种不同面值的硬币，分别是面值 1 元，2 元，5 元，10 元，20 元，50 元， 100 元。假设每种面值的硬币数量是无限的，现在你想用这些硬币凑出总面值为 n 的硬币， 同时你想让选出的硬币中，不同的面值种类尽可能多;在面值种类尽可能多的情况下，你想 让选择的硬币总数目尽可能多，请问应该怎么选择硬币呢?</p><p>思路：先保证最多的种类,之后用1元填</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n=in.nextInt();</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">       </span><br><span class="line">        <span class="type">int</span>[] coins=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        change(coins,n);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span>[] coins,<span class="type">int</span> n)</span>&#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> <span class="number">0</span>, count = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coins.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 按面值升序遍历每种硬币，先保证硬币种类尽可能多</span></span><br><span class="line">            <span class="keyword">if</span>(sum + coins[i] &lt;= n)&#123;</span><br><span class="line">                sum += coins[i];</span><br><span class="line">                count ++;</span><br><span class="line">                type ++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">               </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;n) count+=n-sum;</span><br><span class="line">        System.out.println(type+<span class="string">&quot; &quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q20-划分分数线"><a href="#Q20-划分分数线" class="headerlink" title="Q20 划分分数线"></a>Q20 划分分数线</h3><p>某比赛已经进入了淘汰赛阶段,已知共有n名选手参与了此阶段比赛，他们的得分分别是a_1,a_2….a_n,小美作为比赛的裁判希望设定一个分数线m，使得所有分数大于m的选手晋级，其他人淘汰。</p><p>但是为了保护粉丝脆弱的心脏，小美希望晋级和淘汰的人数均在[x,y]之间。</p><p>显然这个m有可能是不存在的，也有可能存在多个m，如果不存在，请你输出-1，如果存在多个，请你输出符合条件的最低的分数线。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                arr[i] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="type">int</span> ans=codeLine(arr,x,y,n);</span><br><span class="line">        System.out.print(ans==-<span class="number">1</span>?-<span class="number">1</span>:ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">codeLine</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt;= n)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> x &lt; n - y ? arr[n - y - <span class="number">1</span>] : arr[x - <span class="number">1</span>]; <span class="comment">//贪心</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q21-硬币兑换组合总数"><a href="#Q21-硬币兑换组合总数" class="headerlink" title="Q21 硬币兑换组合总数"></a>Q21 硬币兑换组合总数</h3><p>给你六种面额 1、5、10、20、50、100 元的纸币，假设每种币值的数量都足够多，编写程序求组成 n 元的不同组合的个数。使用一位dp进行动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意类名必须为 Main, 不要有任何 package xxx 信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="type">int</span>[] money = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">100</span>&#125;;</span><br><span class="line">        <span class="type">long</span> []dp = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= money[i])</span><br><span class="line">                    dp[j] += dp[j - money[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          System.out.println(dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-22二进制字符为连续1的个数"><a href="#Q-22二进制字符为连续1的个数" class="headerlink" title="Q 22二进制字符为连续1的个数"></a>Q 22二进制字符为连续1的个数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="title function_">readline</span>());</span><br><span class="line"><span class="comment">// 将数据转换成二进制</span></span><br><span class="line"><span class="keyword">const</span> str = num.<span class="title function_">toString</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 用正则匹配二进制字符串中连续的1出现的情况</span></span><br><span class="line"><span class="keyword">const</span> arr = str.<span class="title function_">match</span>(<span class="regexp">/1*/ig</span>);</span><br><span class="line"><span class="comment">// 判断匹配中的结果</span></span><br><span class="line"><span class="keyword">if</span>(arr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">// 匹配中了多个连续的1，获取长度最长的那个</span></span><br><span class="line">    <span class="title function_">print</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(... arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">length</span>)));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果数组长度为0，则是没有匹配中连续的1，则查看是否有1出现</span></span><br><span class="line">    <span class="title function_">print</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;1&quot;</span>) &gt;= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-21-有效的括号"><a href="#Q-21-有效的括号" class="headerlink" title="Q 21 有效的括号"></a>Q 21 有效的括号</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">int</span> l=s.length();</span><br><span class="line">            s=s.replace(<span class="string">&quot;()&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            s=s.replace(<span class="string">&quot;&#123;&#125;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            s=s.replace(<span class="string">&quot;[]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(s.length()==l)&#123;<span class="keyword">return</span> l==<span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q22生成css十六进制的颜色"><a href="#Q22生成css十六进制的颜色" class="headerlink" title="Q22生成css十六进制的颜色"></a>Q22生成css十六进制的颜色</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">color</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span>+<span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toStirng</span>(<span class="number">16</span>).<span class="title function_">substr</span>(<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/#([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">6</span>&#125;|[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">3</span>&#125;)/g</span><br><span class="line"><span class="keyword">var</span> patt=<span class="regexp">/#([0-9a-fA-F]&#123;6&#125;|[0-9a-ffA-F]&#123;3&#125;)/g</span>;</span><br><span class="line">patt.<span class="title function_">test</span>(str);</span><br></pre></td></tr></table></figure><h3 id="Q23-遍历二叉树"><a href="#Q23-遍历二叉树" class="headerlink" title="Q23 遍历二叉树"></a>Q23 遍历二叉树</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义树的节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构建树</span></span><br><span class="line"><span class="keyword">let</span> root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">root.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">root.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">root.<span class="property">left</span>.<span class="property">left</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>);</span><br><span class="line">root.<span class="property">left</span>.<span class="property">right</span> = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 递归中序遍历二叉树</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">midOrder</span>(<span class="params">root</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span>(!root || !(root <span class="keyword">instanceof</span> <span class="title class_">TreeNode</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归访问左子树</span></span><br><span class="line">    <span class="title function_">midOrder</span>(root.<span class="property">left</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(root.<span class="property">value</span>);</span><br><span class="line">    <span class="comment">// 递归访问右子树</span></span><br><span class="line">    <span class="title function_">midOrder</span>(root.<span class="property">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">midOrder</span>(root);</span><br></pre></td></tr></table></figure><h3 id="Q24-爬楼梯"><a href="#Q24-爬楼梯" class="headerlink" title="Q24 爬楼梯"></a>Q24 爬楼梯</h3><p>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意<strong>：</strong>给定 <em>n</em> 是一个正整数。</p><p>方法分析：</p><p>这道题主要是要明白该爬楼梯的规律其实就是符合斐波那契数列（Fibonacci Sequence） 规律的，问题就迎刃而解了。为什么说它是斐波那契数列呢？我们可以这样来思考：当我们从第 n-1 阶楼梯爬到第 n 阶楼梯时，需要1步；当我们从第 n-2 阶楼梯爬到第 n 阶楼梯时，需要2步.也就是说 到达第 n 阶楼梯的方法数等于到达第 n-1 阶楼梯的方法数加上到达第 n-2 阶楼梯的方法数，即 f(n) &#x3D; f(n - 1) + f(n - 2)，其正好符合斐波那契通项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> climb=<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">climb</span>(n-<span class="number">1</span>)+<span class="title function_">climb</span>(n-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 手册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速使用chatgpt</title>
      <link href="/post/29aa982.html"/>
      <url>/post/29aa982.html</url>
      
        <content type="html"><![CDATA[<h1 id="chatGPT-快速使用"><a href="#chatGPT-快速使用" class="headerlink" title="chatGPT 快速使用"></a>chatGPT 快速使用</h1><h2 id="中文镜像网站"><a href="#中文镜像网站" class="headerlink" title="中文镜像网站"></a>中文镜像网站</h2><p><a href="https://chat.forchange.cn/">https://chat.forchange.cn/</a></p><p><a href="https://chat2.yqcloud.top/#/chat/1680179604269">https://chat2.yqcloud.top/#/chat/1680179604269</a></p><p><a href="https://chat1.binjie.site:7777/#/chat/1679921934706">https://chat1.binjie.site:7777/#/chat/1679921934706</a></p><p><a href="https://ai.bo-e.com/">https://ai.bo-e.com/</a> </p><p><a href="http://ai.usesless.com/chat/1679924190539">http://ai.usesless.com/chat/1679924190539</a></p><h2 id="英文源地址"><a href="#英文源地址" class="headerlink" title="英文源地址"></a>英文源地址</h2><p>好像会锁地区</p><p><a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a></p><p>可以使用以下的共享账号登录</p><p>账号：<a href="mailto:&#107;&#x74;&#x6d;&#103;&#113;&#51;&#107;&#x36;&#x74;&#121;&#102;&#64;&#111;&#x75;&#116;&#108;&#x6f;&#x6f;&#107;&#46;&#x63;&#x6f;&#x6d;">&#107;&#x74;&#x6d;&#103;&#113;&#51;&#107;&#x36;&#x74;&#121;&#102;&#64;&#111;&#x75;&#116;&#108;&#x6f;&#x6f;&#107;&#46;&#x63;&#x6f;&#x6d;</a></p><p>密码： rvn68rtz</p><h2 id="VS-code"><a href="#VS-code" class="headerlink" title="VS code"></a>VS code</h2><p>安装 chatgpt插件 （中文版可用）</p><h2 id="meta-写作猫（国产）"><a href="#meta-写作猫（国产）" class="headerlink" title="meta 写作猫（国产）"></a>meta 写作猫（国产）</h2><p>打开微信搜索小程序“对话写作猫”，网页版地址： xiezuocat.com&#x2F;chat</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何建立自己的博客网站</title>
      <link href="/post/7fcb7360.html"/>
      <url>/post/7fcb7360.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/16107.html"/>
      <url>/post/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 入门手册</title>
      <link href="/post/8eff68f4.html"/>
      <url>/post/8eff68f4.html</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-入门手册"><a href="#TypeScript-入门手册" class="headerlink" title="TypeScript 入门手册"></a>TypeScript 入门手册</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>创建项目文件夹 与 ts 文件夹，在ts文件夹里面添加 ts为后缀的文件  test1.ts  在里面输入一个js 输入代码</p><p>输入下列指令安装 typescript</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p>在ts文件夹下进行 tsc  xx.ts</p><p>如果报错使用下面指令,逐条输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS E:\typscriptproject&gt; get-ExecutionPolicy</span><br><span class="line">PS E:\typscriptproject&gt; set-ExecutionPolicy RemoteSigned</span><br><span class="line">PS E:\typscriptproject&gt; get-ExecutionPolicy</span><br></pre></td></tr></table></figure><h2 id="变量类型的声明"><a href="#变量类型的声明" class="headerlink" title="变量类型的声明"></a>变量类型的声明</h2><p>在test1 里面输入 代码 声明变量的类型这样就可以将js 代码里面的变量类型锁定什么的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let a : number;</span><br></pre></td></tr></table></figure><p>如果前面直接变量加赋值之后就可以进行自动声明类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let d =123;</span><br></pre></td></tr></table></figure><p>可以在ts 里面写函数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> b=<span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum=<span class="keyword">function</span> (<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(a,b));</span><br></pre></td></tr></table></figure><h3 id="typescript-中类型的声明"><a href="#typescript-中类型的声明" class="headerlink" title="typescript 中类型的声明"></a>typescript 中类型的声明</h3><p>布尔值类型 在typescript 中 可以声明 布尔值类型 boolean</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span>=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>数值类型 number</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decLiteral</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hexLiteral</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="comment">// ES6 中的二进制表示法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binaryLiteral</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="comment">// ES6 中的八进制表示法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octalLiteral</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">notANumber</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">infinityNumber</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;</span><br></pre></td></tr></table></figure><p>使用空值 void表示返回的函数值</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">alertName</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;My name is Tom&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>any 类型就是任意类型（尽量不用） ，如果实在不自动什么类型使用 unknown 类型</p><p>null 与 undefined</p><p>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>就是变量可以拥有多个类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myFavoriteNumber</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">myFavoriteNumber = <span class="string">&#x27;seven&#x27;</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>形参也允许拥有多个类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getString</span>(<span class="params">something: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> something.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>命名规则 可以用类型 加[]</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>数组泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">f</span>:<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">这里定义了数组类型的数组</span><br></pre></td></tr></table></figure><p>用接口定义数组的结构</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberArray</span> &#123;</span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: <span class="title class_">NumberArray</span> = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 上面的泛型规定只有下标是数字，里面的元素也是方向</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">args</span>: &#123;</span><br><span class="line">        [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">        <span class="attr">callee</span>: <span class="title class_">Function</span>;</span><br><span class="line">    &#125; = <span class="variable language_">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>传统的函数声明一般是有声明式和表达式两种</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明（Function Declaration）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式（Function Expression）</span></span><br><span class="line"><span class="keyword">let</span> mySum = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在ts 里面可以定义为下面两种</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySum = <span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用接口形式定义函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">    (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span>;</span><br><span class="line">mySearch = <span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> source.<span class="title function_">search</span>(subString) !== -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义可选参数就是在形参名后面加一个？可选参数放后面</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mysearch :<span class="title class_">SearchFunc</span>;</span><br><span class="line">mysearch=<span class="keyword">function</span>(<span class="params">source:<span class="built_in">string</span>,substring?:<span class="built_in">string</span></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(substring)&#123;</span><br><span class="line">    <span class="keyword">if</span>(source==substring)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mysearch</span>(<span class="string">&#x27;s&#x27;</span>));</span><br></pre></td></tr></table></figure><p>剩余函数参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrPush2</span>(<span class="params">arry,...items</span>)&#123;</span><br><span class="line">    items.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> arry.<span class="title function_">push</span>(item))</span><br><span class="line">    <span class="keyword">return</span> arry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:<span class="built_in">number</span>[]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrPush2</span>(arr2,...[<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>]));</span><br></pre></td></tr></table></figure><p>重载</p><p>上面两个是定义类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Number</span>(x.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>人为规定一个值的类型</p><p>一般用上面的那种比较合适</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值 <span class="keyword">as</span> 类型</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;类型&gt;值</span><br></pre></td></tr></table></figure><p>使用父子断言的形式可以实现多态的效果，在定义形参的时候定义父接口，实参调用的时候使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ApiError</span> <span class="keyword">extends</span> <span class="title class_">Error</span> &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HttpError</span> <span class="keyword">extends</span> <span class="title class_">Error</span> &#123;</span><br><span class="line">    <span class="attr">statusCode</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isApiError</span>(<span class="params">error: <span class="built_in">Error</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (error <span class="keyword">as</span> <span class="title class_">ApiError</span>).<span class="property">code</span> === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>联合类型（形参有多个类型的情况）可以被断言为其中一个类型</li><li>父类可以被断言为子类</li><li>任何类型都可以被断言为 any</li><li>any 可以被断言为任何类型</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Cat</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="attr">run</span>: <span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run&#x27;</span>) &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">animal</span>: <span class="title class_">Animal</span> = tom;</span><br></pre></td></tr></table></figure><p>左侧定义的类型大于右侧的类（多态）</p><p>双重断言</p><p>由于any类型可以被任何类型断言，也可以用于任何类型的断言</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fish</span> &#123;</span><br><span class="line">    <span class="title function_">swim</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testCat</span>(<span class="params">cat: Cat</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (cat <span class="keyword">as</span> <span class="built_in">any</span> <span class="keyword">as</span> <span class="title class_">Fish</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断言只是在编译阶段修改变量的类型，不是类型转化</p><p>断言有点像多态在函数输出类型不可知的情况下直接返回 any 类型</p><p>再用的时候进行断言</p><p>因此不同赋值的情况下应使用 左边类型大于右边的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">animal</span>: <span class="title class_">Animal</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> tom = animal <span class="keyword">as</span> <span class="title class_">Cat</span>; <span class="comment">//左边类型是any</span></span><br></pre></td></tr></table></figure><p>使用泛型来实现灵活的类型</p><h3 id="声明语法"><a href="#声明语法" class="headerlink" title="声明语法"></a>声明语法</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> 声明全局变量</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> 声明全局方法</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> 声明全局类</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> 声明全局枚举类型</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> 声明（含有子属性的）全局对象</span><br><span class="line">interface 和 type 声明全局类型</span><br><span class="line">export 导出变量</span><br><span class="line">export <span class="keyword">namespace</span> 导出（含有子属性的）对象</span><br><span class="line">export default <span class="title class_">ES6</span> 默认导出</span><br><span class="line">export = commonjs 导出模块</span><br><span class="line">export as <span class="keyword">namespace</span> UMD 库声明全局变量</span><br><span class="line">declare global 扩展全局变量</span><br><span class="line">declare module 扩展模块</span><br><span class="line">/// &lt;reference /&gt; 三斜线指令</span><br></pre></td></tr></table></figure><h3 id="类型别名type"><a href="#类型别名type" class="headerlink" title="类型别名type"></a>类型别名type</h3><p>可以将一个混合类型重新命名</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameResolver</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrResolver</span> = <span class="title class_">Name</span> | <span class="title class_">NameResolver</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">n</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EventNames</span> = <span class="string">&#x27;click&#x27;</span> | <span class="string">&#x27;scroll&#x27;</span> | <span class="string">&#x27;mousemove&#x27;</span>; <span class="comment">//字面量类型，可以在多个字符串里面选一个</span></span><br></pre></td></tr></table></figure><h3 id="元组的声明"><a href="#元组的声明" class="headerlink" title="元组的声明"></a>元组的声明</h3><p>数组是同类型的组合，元组是不同的类型的组合</p><p>元组直接在里面声明了多种类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">25</span>];</span><br></pre></td></tr></table></figure><p>可以像数组一样进行操作</p><p>枚举类型是对一些常用变量进行匹配</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span> &#123;<span class="title class_">Sun</span>, <span class="title class_">Mon</span>, <span class="title class_">Tue</span>, <span class="title class_">Wed</span>, <span class="title class_">Thu</span>, <span class="title class_">Fri</span>, <span class="title class_">Sat</span>&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span> &#123;<span class="title class_">Sun</span>, <span class="title class_">Mon</span>, <span class="title class_">Tue</span>, <span class="title class_">Wed</span>, <span class="title class_">Thu</span>, <span class="title class_">Fri</span>, <span class="title class_">Sat</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Sun&quot;</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Mon&quot;</span>] === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Tue&quot;</span>] === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Sat&quot;</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="number">0</span>] === <span class="string">&quot;Sun&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="number">1</span>] === <span class="string">&quot;Mon&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="number">2</span>] === <span class="string">&quot;Tue&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="number">6</span>] === <span class="string">&quot;Sat&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>每个值会自动对应一个从零开始的下标也可自定义参数的值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span> &#123;<span class="title class_">Sun</span> = <span class="number">7</span>, <span class="title class_">Mon</span> = <span class="number">1</span>, <span class="title class_">Tue</span>, <span class="title class_">Wed</span>, <span class="title class_">Thu</span>, <span class="title class_">Fri</span>, <span class="title class_">Sat</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Sun&quot;</span>] === <span class="number">7</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Mon&quot;</span>] === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Tue&quot;</span>] === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Sat&quot;</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>未被定义值的变量会承接上一个进行赋值</p><p>存在赋值覆盖的问题</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Days</span> &#123;<span class="title class_">Sun</span> = <span class="number">3</span>, <span class="title class_">Mon</span> = <span class="number">1</span>, <span class="title class_">Tue</span>, <span class="title class_">Wed</span>, <span class="title class_">Thu</span>, <span class="title class_">Fri</span>, <span class="title class_">Sat</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Sun&quot;</span>] === <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Wed&quot;</span>] === <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="number">3</span>] === <span class="string">&quot;Sun&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="number">3</span>] === <span class="string">&quot;Wed&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面的例子中，递增到 <code>3</code> 的时候与前面的 <code>Sun</code> 的取值重复了，但是 TypeScript 并没有报错，导致 <code>Days[3]</code> 的值先是 <code>&quot;Sun&quot;</code>，而后又被 <code>&quot;Wed&quot;</code> 覆盖了。编译的结果是：</p><p>带计算式 的赋值要放在最后面（如果还有没赋值的情况）</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>es6 回顾</p><p>类和java很想不过属性的的定义要赋值属性  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    public name;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">sayHi</span>()); <span class="comment">// My name is Jack</span></span><br></pre></td></tr></table></figure><p>继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span></span><br></pre></td></tr></table></figure><p>get set 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter: &#x27;</span> + value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Kitty&#x27;</span>); <span class="comment">// setter: Kitty</span></span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>; <span class="comment">// setter: Tom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>); <span class="comment">// Jack</span></span><br></pre></td></tr></table></figure><p>static 不需实例化之间调用类名调用</p><p>变量的权限</p><h3 id="public-private-和-protected-readonly"><a href="#public-private-和-protected-readonly" class="headerlink" title="public private 和 protected readonly"></a>public private 和 protected readonly</h3><p>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 <code>public</code>、<code>private</code> 和 <code>protected</code>。</p><ul><li><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</li><li><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li><li><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> name;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>); <span class="comment">// Jack</span></span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>); <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure><p>readonly 使用范围</p><p>只读属性关键字，只允许出现在属性声明或索引签名或构造函数中。</p><p> 只读属性关键字 readonly和其他权限一起使用时，放后面</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类时用于定义类的外形里面没有实际功能，子类继承抽象类型，对里面的方法进行重写 使用 abstract 进行命名</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>接口预定义好结构的抽象类，其他类只需要调用就可以了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Alart</span>&#123;</span><br><span class="line">    <span class="attr">types</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">bark</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Alart</span>&#123;</span><br><span class="line">     <span class="attr">types</span>: <span class="built_in">string</span>;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">types</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">types</span>=types;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;警告&quot;</span>+<span class="string">`有人<span class="subst">$&#123;<span class="variable language_">this</span>.types&#125;</span>`</span>);</span><br><span class="line">        </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bens= <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;hh&#x27;</span>);</span><br><span class="line">bens.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>接口继承接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A1 &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A2 <span class="keyword">extends</span> A1&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cars</span> <span class="keyword">implements</span> <span class="variable constant_">A2</span>&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;bens&#x27;</span>;</span><br><span class="line">   id=<span class="string">&#x27;001&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> benss= <span class="keyword">new</span> <span class="title class_">Cars</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(benss.<span class="property">id</span>);</span><br></pre></td></tr></table></figure><p>常见的面向对象语言中，接口是不能继承类的，但是在 TypeScript 中却是可以的</p><p>接口继承类 </p><p>本质上接口继承接口与接口继承类是一样的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3</span>d <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">z</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">point3d</span>: <span class="title class_">Point3</span>d = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>泛型就是在定义的时候不对类型进行定义,在使用的时候再定义</p><p>大致效果与下面类似</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params">length: <span class="built_in">number</span>, value: <span class="built_in">any</span></span>): <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> createArray&lt;T&gt;(<span class="attr">length</span>:<span class="built_in">number</span>,<span class="attr">value</span>:T):<span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">     <span class="keyword">let</span> <span class="attr">result</span>: T[]=[];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">          result[i]=value;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(createArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>,<span class="string">&#x27;x&#x27;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多个类型用逗号隔开</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> swap&lt;T, U&gt;(<span class="attr">tuple</span>: [T, U]): [U, T] &#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">swap</span>([<span class="number">7</span>, <span class="string">&#x27;seven&#x27;</span>]); <span class="comment">// [&#x27;seven&#x27;, 7]</span></span><br></pre></td></tr></table></figure><p>由于泛型可以自由定义,可定义接口来约束泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CreateArrayFunc</span> &#123;</span><br><span class="line">    &lt;T&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createArray</span>: <span class="title class_">CreateArrayFunc</span>;</span><br><span class="line">createArray = <span class="keyword">function</span>&lt;T&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><p>如上就是泛型接口</p><p>与泛型接口类似，泛型也可以用于类的类型定义中：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">zeroValue</span>: T;</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure><p>同时泛型是可以可以进行预定义的类型的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> createArray&lt;T = <span class="built_in">string</span>&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">result</span>: T[] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        result[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口合并（相当于类的重载）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">    <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">    <span class="attr">price</span>: <span class="built_in">number</span>;  <span class="comment">// 虽然重复了，但是类型都是 `number`，所以不会报错</span></span><br><span class="line">    <span class="attr">weight</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">    <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="attr">s</span>: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Alarm</span> &#123;</span><br><span class="line">    <span class="attr">weight</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="attr">s</span>: <span class="built_in">string</span>, <span class="attr">n</span>: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要接口名字一样就可以，就会进行重载合并</p>]]></content>
      
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> 手册 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
